[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "臨床薬理に関する解析用標準プログラムの作成",
    "section": "",
    "text": "用語/略語\n\n\n          used (Mb) gc trigger (Mb) limit (Mb) max used (Mb)\nNcells  802330 42.9    1401847 74.9         NA  1401847 74.9\nVcells 1575770 12.1    8388608 64.0      32768  2707229 20.7\n\n\n          used (Mb) gc trigger (Mb) limit (Mb) max used (Mb)\nNcells  802658 42.9    1401847 74.9         NA  1401847 74.9\nVcells 1576535 12.1    8388608 64.0      32768  2707229 20.7\n\n\n! Using an auto-discovered, cached token.\n\n\n  To suppress this message, modify your code or options to clearly consent to\n  the use of a cached token.\n\n\n  See gargle's \"Non-interactive auth\" vignette for more details:\n\n\n  &lt;https://gargle.r-lib.org/articles/non-interactive-auth.html&gt;\n\n\nℹ The googlesheets4 package is using a cached token for\n  'yoshihiro.fukiya@gmail.com'.\n\n\n✖ Request failed [503]. Retry 1 happens in 6.5 seconds ...\n\n\n✔ Reading from \"用語と定義\".\n\n\n✔ Range 'japanease'.\n\n\n\n\n\n\n  \n    \n    \n      略語/用語\n      説明\n    \n  \n  \n    ADaM\nAnalysis Data Model\n    ADME\nAbsorption（吸収）、Distribution （布）、Metabolism（代謝） and Excretion（排泄）\n    ADPC\nAnalysis Dataset for Pharmacokinetics Concentrations\n    ADPP\nAnalysis Dataset for Pharmacokinetics Parameters\n    BE\n生物学的同等性（Bioequivalence）\n    BLQ\n定量下限未満 （Below Lower limit-of Quantification）\n    CDISC\nClinical Data Interchange Standards Consortium\n    CRF\n症例報告書（Case Report Form）\n    СТ\nControlled Terminology\n    DDI\n棊物間相互作用（Drug-DrugInteraction）\n    EDC\n電子的臨床検査情報収集（Electronic Data Capture）\n    Full-PK\n個々の被験者でトラフなど特定の時期に限定せずに投与後のさまざまな時間帯に採血を行うことによる薬物動態評価\n    h\nHour （WinNonlin 上はhrとなるがCTの用語に合わせた）\n    LLOQ\n定量下限（Lower Limit Of Quantification）\n    NCA\nノンコンパートメント解析\n    PC\nPharmacokinetics Concentrations\n    PK\n薬物動態（学）（Pharmacokinetic （s））\n    PP\nPharmacokinetics Parameters\n    SDTM\nStudy Data Tabulation Model\n    PPK\n母集団薬物動態解析（Population Pharmacokinetics）\n    WinNonlin\nPhoenix・WinNonlin（NCA用の解析ソフト）\n    TLF(s)\n図表及び一覧表（Table Listing Figures）"
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  はじめに",
    "section": "",
    "text": "後から記載"
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "5  ADNCAの作例手順",
    "section": "",
    "text": "# CRAN から入手可能なパッケージ\n##############################\npacman::p_load(\n  # 一般的なデータ管理\n  ####################\n  tidyverse, \n  magrittr, \n  \n  # パッケージのインストールと管理\n  ################################\n  pacman,   # パッケージのインストール・読み込み\n  renv,     # グループで作業する際のパッケージのバージョン管理  \n  \n  # プロジェクトとファイルの管理\n  ##############################\n  here,     # Rのプロジェクトフォルダを基準とするファイルパス\n  rio,      # 様々なタイプのデータのインポート・エクスポート\n  \n  # admiral関連パッケージ\n  ################################\n  admiral, # シミュレーション/C++へコンパイルで必須\n  metacore,   # 非線形混合モデル解析パッケージ\n  metatools,     # 解析結果でgofプロット作成に必須\n  xportr, # 解析結果でgofプロット作成に必須\n  pharmaversesdtm,\n  \n  # other\n  ################################\n  styler,\n  arrow\n)\n\n\n5.0.1 Data import\n\n# ---- Load Specs for Metacore ----\npath &lt;- here::here()\nmetacore &lt;- spec_to_metacore(file.path(path,\"meta\",\"pk_spec.xlsx\")) %&gt;%\n  select_dataset(\"ADPC\")\n\n# ---- Load source datasets ----\n\n# Use e.g. haven::read_sas to read in .sas7bdat, or other suitable functions\n# as needed and assign to the variables below.\n# For illustration purposes read in admiral test data\n\n# Load PC, EX, VS and ADSL\ndata(\"pc\")\ndata(\"ex\")\ndata(\"vs\")\n\ndata(\"admiral_adsl\")\n\nadsl &lt;- admiral_adsl\nex   &lt;- convert_blanks_to_na(ex)\npc   &lt;- convert_blanks_to_na(pc)\nvs   &lt;- convert_blanks_to_na(vs)\n\ndsname &lt;- \"ADPC\"\n\n\n\n5.0.2 rlang metaprogramming\n\n# attrib function\nattrib_func &lt;- function(data,var){\n  if (requireNamespace(\"metatools\", quietly = T)) {\n  data %&gt;%\n    # Drop unspecified variables from specs\n    metatools::drop_unspec_vars({{var}}) %&gt;%\n    # Check all variables specified are present and no more\n    metatools::check_variables({{var}}) %&gt;%\n    # Checks all variables with CT only contain values within the CT.\n    metatools::check_ct_data({{var}}) %&gt;%\n    # Orders the columns according to the spec\n    metatools::order_cols({{var}}) %&gt;%\n    # Sorts the rows by the sort keys\n    metatools::sort_by_key({{var}})\n  }\n  else {\n    stop(\"Required 'metatools' package.\")\n  }\n}\n\n# xpt export function\nexport_xpt &lt;- function(data,var,dir,dsname){\n  if (requireNamespace(\"xportr\", quietly = T)) {\n    data %&gt;%\n      # Coerce variable type to match spec\n      xportr::xportr_type({{var}}) %&gt;%\n      # Assigns SAS length from a variable level metadata\n      xportr::xportr_length({{var}}) %&gt;%\n      # Assigns variable label from metacore specifications\n      xportr::xportr_label({{var}}) %&gt;%\n      # Assigns variable format from metacore specifications\n      xportr::xportr_format({{var}}) %&gt;%\n      # Assigns dataset label from metacore specifications\n      xportr::xportr_df_label({{var}}) %&gt;%\n      # Write xpt v5 transport file\n      xportr::xportr_write(\n        file.path(\n           {{dir}}\n          ,paste(\n             tolower({{dsname}})\n            ,\"xpt\"\n            ,sep=\".\")\n        )\n      ) \n  }\n  else {\n    stop(\"Required 'xportr' package.\")\n  }\n}\n\n\n\n5.0.3 Convertion ADNCA\n\n# ---- Derivations ----\n\n# Get list of ADSL vars required for derivations\nadsl_vars &lt;- exprs(TRTSDT, TRTSDTM, TRT01P, TRT01A)\n\npc_dates &lt;- pc %&gt;%\n  # Join ADSL with PC (need TRTSDT for ADY derivation)\n  derive_vars_merged(\n    dataset_add = adsl,\n    new_vars = adsl_vars,\n    by_vars = exprs(STUDYID, USUBJID)\n  ) %&gt;%\n  # Derive analysis date/time\n  # Impute missing time to 00:00:00\n  derive_vars_dtm(\n    new_vars_prefix = \"A\",\n    dtc = PCDTC,\n    time_imputation = \"00:00:00\"\n  ) %&gt;%\n  # Derive dates and times from date/times\n  derive_vars_dtm_to_dt(exprs(ADTM)) %&gt;%\n  derive_vars_dtm_to_tm(exprs(ADTM)) %&gt;%\n  derive_vars_dy(reference_date = TRTSDT ,\n                 source_vars = exprs(ADT)) %&gt;%\n  # Derive event ID and nominal relative time from first dose (NFRLT)\n  mutate(\n    EVID = 0,\n    DRUG = PCTEST,\n    NFRLT = if_else(PCTPTNUM &lt; 0, 0, PCTPTNUM), .after = USUBJID\n  )\n\n# ---- Get dosing information ----\n\nex_dates &lt;- ex %&gt;%\n  derive_vars_merged(\n    dataset_add = adsl,\n    new_vars = adsl_vars,\n    by_vars = exprs(STUDYID, USUBJID)\n  ) %&gt;%\n  # Keep records with nonzero dose\n  filter(EXDOSE &gt; 0) %&gt;%\n  # Add time and set missing end date to start date\n  # Impute missing time to 00:00:00\n  # Note all times are missing for dosing records in this example data\n  # Derive Analysis Start and End Dates\n  derive_vars_dtm(\n    new_vars_prefix = \"AST\",\n    dtc = EXSTDTC,\n    time_imputation = \"00:00:00\"\n  ) %&gt;%\n  derive_vars_dtm(\n    new_vars_prefix = \"AEN\",\n    dtc = EXENDTC,\n    time_imputation = \"00:00:00\"\n  ) %&gt;%\n  # Derive event ID and nominal relative time from first dose (NFRLT)\n  mutate(\n    EVID = 1,\n    NFRLT = 24 * (VISITDY - 1), .after = USUBJID\n  ) %&gt;%\n  # Set missing end dates to start date\n  mutate(AENDTM = case_when(\n    is.na(AENDTM) ~ ASTDTM,\n    TRUE ~ AENDTM\n  )) %&gt;%\n  # Derive dates from date/times\n  derive_vars_dtm_to_dt(exprs(ASTDTM,AENDTM))\n\n# ---- Expand dosing records between start and end dates ----\n# Updated function includes nominal_time parameter\n\nex_exp &lt;- ex_dates %&gt;%\n  create_single_dose_dataset(\n    dose_freq = EXDOSFRQ,\n    start_date = ASTDT,\n    start_datetime = ASTDTM,\n    end_date = AENDT,\n    end_datetime = AENDTM,\n    nominal_time = NFRLT,\n    lookup_table = dose_freq_lookup,\n    lookup_column = CDISC_VALUE,\n    keep_source_vars = exprs(\n      STUDYID, USUBJID, EVID, EXDOSFRQ, EXDOSFRM,\n      NFRLT, EXDOSE, EXDOSU, EXTRT, ASTDT, ASTDTM, AENDT, AENDTM,\n      VISIT, VISITNUM, VISITDY,\n      TRT01A, TRT01P, DOMAIN, EXSEQ, !!!adsl_vars\n    )\n  ) %&gt;%\n  # Derive AVISIT based on nominal relative time\n  # Derive AVISITN to nominal time in whole days using integer division\n  # Define AVISIT based on nominal day\n  mutate(\n    AVISITN = NFRLT %/% 24 + 1,\n    AVISIT = paste(\"Day\", AVISITN),\n    ADTM = ASTDTM,\n    DRUG = EXTRT\n  ) %&gt;%\n  # Derive dates and times from datetimes\n  derive_vars_dtm_to_dt(exprs(ADTM)) %&gt;%\n  derive_vars_dtm_to_tm(exprs(ADTM,ASTDTM,AENDTM)) %&gt;%\n  derive_vars_dy(reference_date = TRTSDT, source_vars = exprs(ADT))\n\n# ---- Find first dose per treatment per subject ----\n# ---- Join with ADPC data and keep only subjects with dosing ----\n\nadpc_first_dose &lt;- pc_dates %&gt;%\n  derive_vars_merged(\n    dataset_add = ex_exp,\n    filter_add = (EXDOSE &gt; 0 & !is.na(ADTM)),\n    new_vars = exprs(FANLDTM = ADTM),\n    order = exprs(ADTM, EXSEQ),\n    mode = \"first\",\n    by_vars = exprs(STUDYID, USUBJID, DRUG)\n  ) %&gt;%\n  filter(!is.na(FANLDTM)) %&gt;%\n  # Derive AVISIT based on nominal relative time\n  # Derive AVISITN to nominal time in whole days using integer division\n  # Define AVISIT based on nominal day\n  mutate(\n    AVISITN = NFRLT %/% 24 + 1,\n    AVISIT = paste(\"Day\", AVISITN),\n  )\n\n# ---- Find previous dose  ----\n\nadpc_prev &lt;- adpc_first_dose %&gt;%\n  derive_vars_joined(\n    dataset_add = ex_exp,\n    by_vars = exprs(USUBJID),\n    order = exprs(ADTM),\n    new_vars = exprs(\n      ADTM_prev = ADTM, \n      EXDOSE_prev = EXDOSE, \n      AVISIT_prev = AVISIT,\n      AENDTM_prev = AENDTM\n    ),\n    join_vars = exprs(ADTM),\n    filter_add = NULL,\n    filter_join = ADTM &gt; ADTM.join,\n    mode = \"last\",\n    check_type = \"none\"\n  )\n\n# ---- Find next dose  ----\n\nadpc_next &lt;- adpc_prev %&gt;%\n  derive_vars_joined(\n    dataset_add = ex_exp,\n    by_vars = exprs(USUBJID),\n    order = exprs(ADTM),\n    new_vars = exprs(\n      ADTM_next = ADTM, \n      EXDOSE_next = EXDOSE, \n      AVISIT_next = AVISIT,\n      AENDTM_next = AENDTM\n    ),\n    join_vars = exprs(ADTM),\n    filter_add = NULL,\n    filter_join = ADTM &lt;= ADTM.join,\n    mode = \"first\",\n    check_type = \"none\"\n  )\n\n# ---- Find previous nominal time ----\n\nadpc_nom_prev &lt;- adpc_next %&gt;%\n  derive_vars_joined(\n    dataset_add = ex_exp,\n    by_vars = exprs(USUBJID),\n    order = exprs(NFRLT),\n    new_vars = exprs(NFRLT_prev = NFRLT),\n    join_vars = exprs(NFRLT),\n    filter_add = NULL,\n    filter_join = NFRLT &gt; NFRLT.join,\n    mode = \"last\",\n    check_type = \"none\"\n  )\n\n# ---- Find next nominal time ----\n\nadpc_nom_next &lt;- adpc_nom_prev %&gt;%\n  derive_vars_joined(\n    dataset_add = ex_exp,\n    by_vars = exprs(USUBJID),\n    order = exprs(NFRLT),\n    new_vars = exprs(NFRLT_next = NFRLT),\n    join_vars = exprs(NFRLT),\n    filter_add = NULL,\n    filter_join = NFRLT &lt;= NFRLT.join,\n    mode = \"first\",\n    check_type = \"none\"\n  )\n\n# ---- Combine ADPC and EX data ----\n# Derive Relative Time Variables\n\nadpc_arrlt &lt;- bind_rows(adpc_nom_next, ex_exp) %&gt;%\n  group_by(USUBJID, DRUG) %&gt;%\n  mutate(\n    FANLDTM = min(FANLDTM, na.rm = TRUE),\n    min_NFRLT = min(NFRLT_prev, na.rm = TRUE),\n    maxdate = max(ADT[EVID == 0], na.rm = TRUE), .after = USUBJID\n  ) %&gt;%\n  arrange(USUBJID, ADTM) %&gt;%\n  ungroup() %&gt;%\n  filter(ADT &lt;= maxdate) %&gt;%\n  # Derive Actual Relative Time from First Dose (AFRLT)\n  derive_vars_duration(\n    new_var = AFRLT,\n    start_date = FANLDTM,\n    end_date = ADTM,\n    out_unit = \"hours\",\n    floor_in = FALSE,\n    add_one = FALSE\n  ) %&gt;%\n  # Derive Actual Relative Time from Reference Dose (ARRLT)\n  derive_vars_duration(\n    new_var = ARRLT,\n    start_date = ADTM_prev,\n    end_date = ADTM,\n    out_unit = \"hours\",\n    floor_in = FALSE,\n    add_one = FALSE\n  ) %&gt;%\n  # Derive Actual Relative Time from Next Dose (AXRLT not kept)\n  derive_vars_duration(\n    new_var = AXRLT,\n    start_date = ADTM_next,\n    end_date = ADTM,\n    out_unit = \"hours\",\n    floor_in = FALSE,\n    add_one = FALSE\n  ) %&gt;%\n  mutate(\n    ARRLT = case_when(\n      EVID == 1 ~ 0,\n      is.na(ARRLT) ~ AXRLT,\n      TRUE ~ ARRLT\n    ),\n    # Derive Reference Dose Date\n    PCRFTDTM = case_when(\n      EVID == 1 ~ ADTM,\n      is.na(ADTM_prev) ~ ADTM_next,\n      TRUE ~ ADTM_prev\n    )\n  ) %&gt;%\n  # Derive dates and times from datetimes\n  derive_vars_dtm_to_dt(exprs(FANLDTM,PCRFTDTM)) %&gt;%\n  derive_vars_dtm_to_tm(exprs(FANLDTM,PCRFTDTM))\n\n# Derive Nominal Relative Time from Reference Dose (NRRLT)\n\nadpc_nrrlt &lt;- adpc_arrlt %&gt;%\n  mutate(\n    NRRLT = case_when(\n      EVID == 1 ~ 0,\n      is.na(NFRLT_prev) ~ NFRLT - min_NFRLT,\n      TRUE ~ NFRLT - NFRLT_prev\n    ),\n    NXRLT = case_when(\n      EVID == 1 ~ 0,\n      TRUE ~ NFRLT - NFRLT_next\n    )\n  )\n\n# ---- Derive Analysis Variables ----\n# Derive ATPTN, ATPT, ATPTREF, ABLFL and BASETYPE\n# Derive planned dose DOSEP, actual dose DOSEA and units\n# Derive PARAMCD and relative time units\n# Derive AVAL, AVALU and AVALCAT1\n\nadpc_aval &lt;- adpc_nrrlt %&gt;%\n  mutate(\n    ATPTN = case_when(\n      EVID == 1 ~ 0,\n      TRUE ~ PCTPTNUM\n    ),\n    ATPT = case_when(\n      EVID == 1 ~ \"Dose\",\n      TRUE ~ PCTPT\n    ),\n    ATPTREF = case_when(\n      EVID == 1 ~ AVISIT,\n      is.na(AVISIT_prev) ~ AVISIT_next,\n      TRUE ~ AVISIT_prev\n    ),\n    # Derive baseline flag for pre-dose records\n    ABLFL = case_when(\n      ATPT == \"Pre-dose\" ~ \"Y\",\n      TRUE ~ NA_character_\n    ),\n    # Derive BASETYPE\n    BASETYPE = paste(ATPTREF, \"Baseline\"),\n\n    # Derive Actual Dose\n    DOSEA = case_when(\n      EVID == 1 ~ EXDOSE,\n      is.na(EXDOSE_prev) ~ EXDOSE_next,\n      TRUE ~ EXDOSE_prev\n    ),\n    # Derive Planned Dose\n    DOSEP = case_when(\n      TRT01P == \"Xanomeline High Dose\" ~ 81,\n      TRT01P == \"Xanomeline Low Dose\" ~ 54\n    ),\n    DOSEU = \"mg\",\n  ) %&gt;%\n  # Derive relative time units\n  mutate(\n    FRLTU = \"h\",\n    RRLTU = \"h\",\n    # Derive PARAMCD\n    PARAMCD = coalesce(PCTESTCD, \"DOSE\"),\n    ALLOQ = PCLLOQ,\n    # Derive AVAL\n    AVAL = case_when(\n      EVID == 1 ~ EXDOSE,\n      PCSTRESC == \"&lt;BLQ\" & NFRLT == 0 ~ 0,\n      PCSTRESC == \"&lt;BLQ\" & NFRLT &gt; 0 ~ 0.5 * ALLOQ,\n      TRUE ~ PCSTRESN\n    ),\n    AVALU = case_when(\n      EVID == 1 ~ EXDOSU,\n      TRUE ~ PCSTRESU\n    ),\n    AVALCAT1 = if_else(PCSTRESC == \"&lt;BLQ\" ,\n                       PCSTRESC ,\n                       prettyNum(signif(AVAL, digits = 3))),\n  ) %&gt;%\n  # Add SRCSEQ\n  mutate(\n    SRCDOM = DOMAIN,\n    SRCVAR = \"SEQ\",\n    SRCSEQ = coalesce(PCSEQ, EXSEQ)\n  )\n\n# ---- Create DTYPE copy records ----\n\ndtype &lt;- adpc_aval %&gt;%\n  filter(NFRLT &gt; 0 & NXRLT == 0 & EVID == 0 & !is.na(AVISIT_next)) %&gt;%\n  select(-PCRFTDT, -PCRFTTM) %&gt;%\n  # Re-derive variables in for DTYPE copy records\n  mutate(\n    ABLFL = NA_character_,\n    ATPTREF = AVISIT_next,\n    ARRLT = AXRLT,\n    NRRLT = NXRLT,\n    PCRFTDTM = ADTM_next,\n    DOSEA = EXDOSE_next,\n    BASETYPE = paste(AVISIT_next, \"Baseline\"),\n    ATPT = \"Pre-dose\",\n    ATPTN = NFRLT,\n    ABLFL = \"Y\",\n    DTYPE = \"COPY\"\n  ) %&gt;%\n  derive_vars_dtm_to_dt(exprs(PCRFTDTM)) %&gt;%\n  derive_vars_dtm_to_tm(exprs(PCRFTDTM))\n\n# ---- Combine original records and DTYPE copy records ----\n\nadpc_dtype &lt;- bind_rows(adpc_aval, dtype) %&gt;%\n  arrange(STUDYID, USUBJID, BASETYPE, ADTM, NFRLT) %&gt;%\n  mutate(\n    # Derive MRRLT, ANL01FL and ANL02FL\n    MRRLT = if_else(ARRLT &lt; 0, 0, ARRLT),\n    ANL01FL = \"Y\",\n    ANL02FL = if_else(is.na(DTYPE), \"Y\", NA_character_),\n  )\n\n# ---- Derive BASE and Calculate Change from Baseline ----\n\nadpc_base &lt;- adpc_dtype %&gt;%\n  derive_var_base(\n    by_vars = exprs(STUDYID, USUBJID, PARAMCD, BASETYPE),\n    source_var = AVAL,\n    new_var = BASE,\n    filter = ABLFL == \"Y\"\n  )\n\nadpc_chg &lt;- derive_var_chg(adpc_base)\n\n# ---- Add ASEQ ----\n\nadpc_aseq &lt;- adpc_chg %&gt;%\n  # Calculate ASEQ\n  derive_var_obs_number(\n    new_var = ASEQ,\n    by_vars = exprs(STUDYID, USUBJID),\n    order = exprs(ADTM, BASETYPE, EVID, AVISITN, ATPTN, DTYPE),\n    check_type = \"error\"\n  ) %&gt;%\n  # Derive PARAM and PARAMN using metatools\n  create_var_from_codelist(metacore, input_var = PARAMCD, out_var = PARAM) %&gt;%\n  create_var_from_codelist(metacore, input_var = PARAMCD, out_var = PARAMN)\n\n#---- Derive additional baselines from VS ----\n\nadpc_baselines &lt;- adpc_aseq %&gt;%\n  derive_vars_merged(\n    dataset_add = vs,\n    filter_add = VSTESTCD == \"HEIGHT\",\n    by_vars = exprs(STUDYID, USUBJID),\n    new_vars = exprs(HTBL = VSSTRESN, HTBLU = VSSTRESU)\n  ) %&gt;%\n  derive_vars_merged(\n    dataset_add = vs,\n    filter_add = VSTESTCD == \"WEIGHT\" & VSBLFL == \"Y\",\n    by_vars = exprs(STUDYID, USUBJID),\n    new_vars = exprs(WTBL = VSSTRESN, WTBLU = VSSTRESU)\n  ) %&gt;%\n  mutate(\n    BMIBL = compute_bmi(height = HTBL, weight = WTBL),\n    BMIBLU = \"kg/m^2\"\n  )\n\n# ---- Add all ADSL variables ----\n\n# Add all ADSL variables\nadpc_prefinal &lt;- adpc_baselines %&gt;%\n  derive_vars_merged(\n    dataset_add = select(adsl, !!!negate_vars(adsl_vars)),\n    by_vars = exprs(STUDYID, USUBJID)\n  )\n\n# Final Steps, Select final variables and Add labels\n# This process will be based on your metadata, no example given for this reason\n# ...\n\ndir &lt;- \"./output\"\n\n# Apply metadata and perform associated checks ----\n# uses {metatools}\nadpc &lt;- attrib_func(adpc_prefinal,metacore)\n\n# xpt export function\nexport_xpt(adpc,metacore,dir,dsname)\n  \n# ---- Save output ----\n\n# parquet format\nwrite_parquet(\n  adpc, paste(paste(dir,\"adpc\",sep=\"/\"),\"gz.parquet\",sep=\".\")\n              , compression = \"gzip\", compression_level = 5)"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "r-env.html",
    "href": "r-env.html",
    "title": "2  Rプログラムの開発環境",
    "section": "",
    "text": "Rstudioとgitを用いた開発環境を前提とする。"
  },
  {
    "objectID": "tidyverse.html",
    "href": "tidyverse.html",
    "title": "3  Tidyverseの説明",
    "section": "",
    "text": "https://uribo.github.io/230827ism_ws/\n\n3.0.1 dplyrの説明\n\n\n3.0.2 tidyrの説明"
  }
]