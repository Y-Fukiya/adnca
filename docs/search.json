[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "臨床薬理に関する解析用標準プログラムの作成",
    "section": "",
    "text": "用語/略語"
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  はじめに",
    "section": "",
    "text": "後から記載"
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "5  ADNCAの作例手順",
    "section": "",
    "text": "# CRAN から入手可能なパッケージ\n##############################\npacman::p_load(\n  # 一般的なデータ管理\n  ####################\n  tidyverse, \n  magrittr, \n  \n  # パッケージのインストールと管理\n  ################################\n  pacman,   # パッケージのインストール・読み込み\n  renv,     # グループで作業する際のパッケージのバージョン管理  \n  \n  # プロジェクトとファイルの管理\n  ##############################\n  here,     # Rのプロジェクトフォルダを基準とするファイルパス\n  rio,      # 様々なタイプのデータのインポート・エクスポート\n  \n  # admiral関連パッケージ\n  ################################\n  admiral, # シミュレーション/C++へコンパイルで必須\n  metacore,   # 非線形混合モデル解析パッケージ\n  metatools,     # 解析結果でgofプロット作成に必須\n  xportr, # 解析結果でgofプロット作成に必須\n  pharmaversesdtm,\n  \n  # other\n  ################################\n  styler,\n  arrow\n)\n\n\n5.0.1 Data import\n\n# ---- Load Specs for Metacore ----\npath &lt;- here::here()\nmetacore &lt;- spec_to_metacore(file.path(path,\"meta\",\"pk_spec.xlsx\")) %&gt;%\n  select_dataset(\"ADPC\")\n\n# ---- Load source datasets ----\n\n# Use e.g. haven::read_sas to read in .sas7bdat, or other suitable functions\n# as needed and assign to the variables below.\n# For illustration purposes read in admiral test data\n\n# Load PC, EX, VS and ADSL\ndata(\"pc\")\ndata(\"ex\")\ndata(\"vs\")\n\ndata(\"admiral_adsl\")\n\nadsl &lt;- admiral_adsl\nex   &lt;- convert_blanks_to_na(ex)\npc   &lt;- convert_blanks_to_na(pc)\nvs   &lt;- convert_blanks_to_na(vs)\n\ndsname &lt;- \"ADPC\"\n\n\n\n5.0.2 rlang metaprogramming\n\n# attrib function\nattrib_func &lt;- function(data,var){\n  if (requireNamespace(\"metatools\", quietly = T)) {\n  data %&gt;%\n    # Drop unspecified variables from specs\n    metatools::drop_unspec_vars({{var}}) %&gt;%\n    # Check all variables specified are present and no more\n    metatools::check_variables({{var}}) %&gt;%\n    # Checks all variables with CT only contain values within the CT.\n    metatools::check_ct_data({{var}}) %&gt;%\n    # Orders the columns according to the spec\n    metatools::order_cols({{var}}) %&gt;%\n    # Sorts the rows by the sort keys\n    metatools::sort_by_key({{var}})\n  }\n  else {\n    stop(\"Required 'metatools' package.\")\n  }\n}\n\n# xpt export function\nexport_xpt &lt;- function(data,var,dir,dsname){\n  if (requireNamespace(\"xportr\", quietly = T)) {\n    data %&gt;%\n      # Coerce variable type to match spec\n      xportr::xportr_type({{var}}) %&gt;%\n      # Assigns SAS length from a variable level metadata\n      xportr::xportr_length({{var}}) %&gt;%\n      # Assigns variable label from metacore specifications\n      xportr::xportr_label({{var}}) %&gt;%\n      # Assigns variable format from metacore specifications\n      xportr::xportr_format({{var}}) %&gt;%\n      # Assigns dataset label from metacore specifications\n      xportr::xportr_df_label({{var}}) %&gt;%\n      # Write xpt v5 transport file\n      xportr::xportr_write(\n        file.path(\n           {{dir}}\n          ,paste(\n             tolower({{dsname}})\n            ,\"xpt\"\n            ,sep=\".\")\n        )\n      ) \n  }\n  else {\n    stop(\"Required 'xportr' package.\")\n  }\n}\n\n\n\n5.0.3 Convertion ADNCA\n\n# ---- Derivations ----\n\n# Get list of ADSL vars required for derivations\nadsl_vars &lt;- exprs(TRTSDT, TRTSDTM, TRT01P, TRT01A)\n\npc_dates &lt;- pc %&gt;%\n  # Join ADSL with PC (need TRTSDT for ADY derivation)\n  derive_vars_merged(\n    dataset_add = adsl,\n    new_vars = adsl_vars,\n    by_vars = exprs(STUDYID, USUBJID)\n  ) %&gt;%\n  # Derive analysis date/time\n  # Impute missing time to 00:00:00\n  derive_vars_dtm(\n    new_vars_prefix = \"A\",\n    dtc = PCDTC,\n    time_imputation = \"00:00:00\"\n  ) %&gt;%\n  # Derive dates and times from date/times\n  derive_vars_dtm_to_dt(exprs(ADTM)) %&gt;%\n  derive_vars_dtm_to_tm(exprs(ADTM)) %&gt;%\n  derive_vars_dy(reference_date = TRTSDT ,\n                 source_vars = exprs(ADT)) %&gt;%\n  # Derive event ID and nominal relative time from first dose (NFRLT)\n  mutate(\n    EVID = 0,\n    DRUG = PCTEST,\n    NFRLT = if_else(PCTPTNUM &lt; 0, 0, PCTPTNUM), .after = USUBJID\n  )\n\n# ---- Get dosing information ----\n\nex_dates &lt;- ex %&gt;%\n  derive_vars_merged(\n    dataset_add = adsl,\n    new_vars = adsl_vars,\n    by_vars = exprs(STUDYID, USUBJID)\n  ) %&gt;%\n  # Keep records with nonzero dose\n  filter(EXDOSE &gt; 0) %&gt;%\n  # Add time and set missing end date to start date\n  # Impute missing time to 00:00:00\n  # Note all times are missing for dosing records in this example data\n  # Derive Analysis Start and End Dates\n  derive_vars_dtm(\n    new_vars_prefix = \"AST\",\n    dtc = EXSTDTC,\n    time_imputation = \"00:00:00\"\n  ) %&gt;%\n  derive_vars_dtm(\n    new_vars_prefix = \"AEN\",\n    dtc = EXENDTC,\n    time_imputation = \"00:00:00\"\n  ) %&gt;%\n  # Derive event ID and nominal relative time from first dose (NFRLT)\n  mutate(\n    EVID = 1,\n    NFRLT = 24 * (VISITDY - 1), .after = USUBJID\n  ) %&gt;%\n  # Set missing end dates to start date\n  mutate(AENDTM = case_when(\n    is.na(AENDTM) ~ ASTDTM,\n    TRUE ~ AENDTM\n  )) %&gt;%\n  # Derive dates from date/times\n  derive_vars_dtm_to_dt(exprs(ASTDTM,AENDTM))\n\n# ---- Expand dosing records between start and end dates ----\n# Updated function includes nominal_time parameter\n\nex_exp &lt;- ex_dates %&gt;%\n  create_single_dose_dataset(\n    dose_freq = EXDOSFRQ,\n    start_date = ASTDT,\n    start_datetime = ASTDTM,\n    end_date = AENDT,\n    end_datetime = AENDTM,\n    nominal_time = NFRLT,\n    lookup_table = dose_freq_lookup,\n    lookup_column = CDISC_VALUE,\n    keep_source_vars = exprs(\n      STUDYID, USUBJID, EVID, EXDOSFRQ, EXDOSFRM,\n      NFRLT, EXDOSE, EXDOSU, EXTRT, ASTDT, ASTDTM, AENDT, AENDTM,\n      VISIT, VISITNUM, VISITDY,\n      TRT01A, TRT01P, DOMAIN, EXSEQ, !!!adsl_vars\n    )\n  ) %&gt;%\n  # Derive AVISIT based on nominal relative time\n  # Derive AVISITN to nominal time in whole days using integer division\n  # Define AVISIT based on nominal day\n  mutate(\n    AVISITN = NFRLT %/% 24 + 1,\n    AVISIT = paste(\"Day\", AVISITN),\n    ADTM = ASTDTM,\n    DRUG = EXTRT\n  ) %&gt;%\n  # Derive dates and times from datetimes\n  derive_vars_dtm_to_dt(exprs(ADTM)) %&gt;%\n  derive_vars_dtm_to_tm(exprs(ADTM,ASTDTM,AENDTM)) %&gt;%\n  derive_vars_dy(reference_date = TRTSDT, source_vars = exprs(ADT))\n\n# ---- Find first dose per treatment per subject ----\n# ---- Join with ADPC data and keep only subjects with dosing ----\n\nadpc_first_dose &lt;- pc_dates %&gt;%\n  derive_vars_merged(\n    dataset_add = ex_exp,\n    filter_add = (EXDOSE &gt; 0 & !is.na(ADTM)),\n    new_vars = exprs(FANLDTM = ADTM),\n    order = exprs(ADTM, EXSEQ),\n    mode = \"first\",\n    by_vars = exprs(STUDYID, USUBJID, DRUG)\n  ) %&gt;%\n  filter(!is.na(FANLDTM)) %&gt;%\n  # Derive AVISIT based on nominal relative time\n  # Derive AVISITN to nominal time in whole days using integer division\n  # Define AVISIT based on nominal day\n  mutate(\n    AVISITN = NFRLT %/% 24 + 1,\n    AVISIT = paste(\"Day\", AVISITN),\n  )\n\n# ---- Find previous dose  ----\n\nadpc_prev &lt;- adpc_first_dose %&gt;%\n  derive_vars_joined(\n    dataset_add = ex_exp,\n    by_vars = exprs(USUBJID),\n    order = exprs(ADTM),\n    new_vars = exprs(\n      ADTM_prev = ADTM, \n      EXDOSE_prev = EXDOSE, \n      AVISIT_prev = AVISIT,\n      AENDTM_prev = AENDTM\n    ),\n    join_vars = exprs(ADTM),\n    filter_add = NULL,\n    filter_join = ADTM &gt; ADTM.join,\n    mode = \"last\",\n    check_type = \"none\"\n  )\n\n# ---- Find next dose  ----\n\nadpc_next &lt;- adpc_prev %&gt;%\n  derive_vars_joined(\n    dataset_add = ex_exp,\n    by_vars = exprs(USUBJID),\n    order = exprs(ADTM),\n    new_vars = exprs(\n      ADTM_next = ADTM, \n      EXDOSE_next = EXDOSE, \n      AVISIT_next = AVISIT,\n      AENDTM_next = AENDTM\n    ),\n    join_vars = exprs(ADTM),\n    filter_add = NULL,\n    filter_join = ADTM &lt;= ADTM.join,\n    mode = \"first\",\n    check_type = \"none\"\n  )\n\n# ---- Find previous nominal time ----\n\nadpc_nom_prev &lt;- adpc_next %&gt;%\n  derive_vars_joined(\n    dataset_add = ex_exp,\n    by_vars = exprs(USUBJID),\n    order = exprs(NFRLT),\n    new_vars = exprs(NFRLT_prev = NFRLT),\n    join_vars = exprs(NFRLT),\n    filter_add = NULL,\n    filter_join = NFRLT &gt; NFRLT.join,\n    mode = \"last\",\n    check_type = \"none\"\n  )\n\n# ---- Find next nominal time ----\n\nadpc_nom_next &lt;- adpc_nom_prev %&gt;%\n  derive_vars_joined(\n    dataset_add = ex_exp,\n    by_vars = exprs(USUBJID),\n    order = exprs(NFRLT),\n    new_vars = exprs(NFRLT_next = NFRLT),\n    join_vars = exprs(NFRLT),\n    filter_add = NULL,\n    filter_join = NFRLT &lt;= NFRLT.join,\n    mode = \"first\",\n    check_type = \"none\"\n  )\n\n# ---- Combine ADPC and EX data ----\n# Derive Relative Time Variables\n\nadpc_arrlt &lt;- bind_rows(adpc_nom_next, ex_exp) %&gt;%\n  group_by(USUBJID, DRUG) %&gt;%\n  mutate(\n    FANLDTM = min(FANLDTM, na.rm = TRUE),\n    min_NFRLT = min(NFRLT_prev, na.rm = TRUE),\n    maxdate = max(ADT[EVID == 0], na.rm = TRUE), .after = USUBJID\n  ) %&gt;%\n  arrange(USUBJID, ADTM) %&gt;%\n  ungroup() %&gt;%\n  filter(ADT &lt;= maxdate) %&gt;%\n  # Derive Actual Relative Time from First Dose (AFRLT)\n  derive_vars_duration(\n    new_var = AFRLT,\n    start_date = FANLDTM,\n    end_date = ADTM,\n    out_unit = \"hours\",\n    floor_in = FALSE,\n    add_one = FALSE\n  ) %&gt;%\n  # Derive Actual Relative Time from Reference Dose (ARRLT)\n  derive_vars_duration(\n    new_var = ARRLT,\n    start_date = ADTM_prev,\n    end_date = ADTM,\n    out_unit = \"hours\",\n    floor_in = FALSE,\n    add_one = FALSE\n  ) %&gt;%\n  # Derive Actual Relative Time from Next Dose (AXRLT not kept)\n  derive_vars_duration(\n    new_var = AXRLT,\n    start_date = ADTM_next,\n    end_date = ADTM,\n    out_unit = \"hours\",\n    floor_in = FALSE,\n    add_one = FALSE\n  ) %&gt;%\n  mutate(\n    ARRLT = case_when(\n      EVID == 1 ~ 0,\n      is.na(ARRLT) ~ AXRLT,\n      TRUE ~ ARRLT\n    ),\n    # Derive Reference Dose Date\n    PCRFTDTM = case_when(\n      EVID == 1 ~ ADTM,\n      is.na(ADTM_prev) ~ ADTM_next,\n      TRUE ~ ADTM_prev\n    )\n  ) %&gt;%\n  # Derive dates and times from datetimes\n  derive_vars_dtm_to_dt(exprs(FANLDTM,PCRFTDTM)) %&gt;%\n  derive_vars_dtm_to_tm(exprs(FANLDTM,PCRFTDTM))\n\n# Derive Nominal Relative Time from Reference Dose (NRRLT)\n\nadpc_nrrlt &lt;- adpc_arrlt %&gt;%\n  mutate(\n    NRRLT = case_when(\n      EVID == 1 ~ 0,\n      is.na(NFRLT_prev) ~ NFRLT - min_NFRLT,\n      TRUE ~ NFRLT - NFRLT_prev\n    ),\n    NXRLT = case_when(\n      EVID == 1 ~ 0,\n      TRUE ~ NFRLT - NFRLT_next\n    )\n  )\n\n# ---- Derive Analysis Variables ----\n# Derive ATPTN, ATPT, ATPTREF, ABLFL and BASETYPE\n# Derive planned dose DOSEP, actual dose DOSEA and units\n# Derive PARAMCD and relative time units\n# Derive AVAL, AVALU and AVALCAT1\n\nadpc_aval &lt;- adpc_nrrlt %&gt;%\n  mutate(\n    ATPTN = case_when(\n      EVID == 1 ~ 0,\n      TRUE ~ PCTPTNUM\n    ),\n    ATPT = case_when(\n      EVID == 1 ~ \"Dose\",\n      TRUE ~ PCTPT\n    ),\n    ATPTREF = case_when(\n      EVID == 1 ~ AVISIT,\n      is.na(AVISIT_prev) ~ AVISIT_next,\n      TRUE ~ AVISIT_prev\n    ),\n    # Derive baseline flag for pre-dose records\n    ABLFL = case_when(\n      ATPT == \"Pre-dose\" ~ \"Y\",\n      TRUE ~ NA_character_\n    ),\n    # Derive BASETYPE\n    BASETYPE = paste(ATPTREF, \"Baseline\"),\n\n    # Derive Actual Dose\n    DOSEA = case_when(\n      EVID == 1 ~ EXDOSE,\n      is.na(EXDOSE_prev) ~ EXDOSE_next,\n      TRUE ~ EXDOSE_prev\n    ),\n    # Derive Planned Dose\n    DOSEP = case_when(\n      TRT01P == \"Xanomeline High Dose\" ~ 81,\n      TRT01P == \"Xanomeline Low Dose\" ~ 54\n    ),\n    DOSEU = \"mg\",\n  ) %&gt;%\n  # Derive relative time units\n  mutate(\n    FRLTU = \"h\",\n    RRLTU = \"h\",\n    # Derive PARAMCD\n    PARAMCD = coalesce(PCTESTCD, \"DOSE\"),\n    ALLOQ = PCLLOQ,\n    # Derive AVAL\n    AVAL = case_when(\n      EVID == 1 ~ EXDOSE,\n      PCSTRESC == \"&lt;BLQ\" & NFRLT == 0 ~ 0,\n      PCSTRESC == \"&lt;BLQ\" & NFRLT &gt; 0 ~ 0.5 * ALLOQ,\n      TRUE ~ PCSTRESN\n    ),\n    AVALU = case_when(\n      EVID == 1 ~ EXDOSU,\n      TRUE ~ PCSTRESU\n    ),\n    AVALCAT1 = if_else(PCSTRESC == \"&lt;BLQ\" ,\n                       PCSTRESC ,\n                       prettyNum(signif(AVAL, digits = 3))),\n  ) %&gt;%\n  # Add SRCSEQ\n  mutate(\n    SRCDOM = DOMAIN,\n    SRCVAR = \"SEQ\",\n    SRCSEQ = coalesce(PCSEQ, EXSEQ)\n  )\n\n# ---- Create DTYPE copy records ----\n\ndtype &lt;- adpc_aval %&gt;%\n  filter(NFRLT &gt; 0 & NXRLT == 0 & EVID == 0 & !is.na(AVISIT_next)) %&gt;%\n  select(-PCRFTDT, -PCRFTTM) %&gt;%\n  # Re-derive variables in for DTYPE copy records\n  mutate(\n    ABLFL = NA_character_,\n    ATPTREF = AVISIT_next,\n    ARRLT = AXRLT,\n    NRRLT = NXRLT,\n    PCRFTDTM = ADTM_next,\n    DOSEA = EXDOSE_next,\n    BASETYPE = paste(AVISIT_next, \"Baseline\"),\n    ATPT = \"Pre-dose\",\n    ATPTN = NFRLT,\n    ABLFL = \"Y\",\n    DTYPE = \"COPY\"\n  ) %&gt;%\n  derive_vars_dtm_to_dt(exprs(PCRFTDTM)) %&gt;%\n  derive_vars_dtm_to_tm(exprs(PCRFTDTM))\n\n# ---- Combine original records and DTYPE copy records ----\n\nadpc_dtype &lt;- bind_rows(adpc_aval, dtype) %&gt;%\n  arrange(STUDYID, USUBJID, BASETYPE, ADTM, NFRLT) %&gt;%\n  mutate(\n    # Derive MRRLT, ANL01FL and ANL02FL\n    MRRLT = if_else(ARRLT &lt; 0, 0, ARRLT),\n    ANL01FL = \"Y\",\n    ANL02FL = if_else(is.na(DTYPE), \"Y\", NA_character_),\n  )\n\n# ---- Derive BASE and Calculate Change from Baseline ----\n\nadpc_base &lt;- adpc_dtype %&gt;%\n  derive_var_base(\n    by_vars = exprs(STUDYID, USUBJID, PARAMCD, BASETYPE),\n    source_var = AVAL,\n    new_var = BASE,\n    filter = ABLFL == \"Y\"\n  )\n\nadpc_chg &lt;- derive_var_chg(adpc_base)\n\n# ---- Add ASEQ ----\n\nadpc_aseq &lt;- adpc_chg %&gt;%\n  # Calculate ASEQ\n  derive_var_obs_number(\n    new_var = ASEQ,\n    by_vars = exprs(STUDYID, USUBJID),\n    order = exprs(ADTM, BASETYPE, EVID, AVISITN, ATPTN, DTYPE),\n    check_type = \"error\"\n  ) %&gt;%\n  # Derive PARAM and PARAMN using metatools\n  create_var_from_codelist(metacore, input_var = PARAMCD, out_var = PARAM) %&gt;%\n  create_var_from_codelist(metacore, input_var = PARAMCD, out_var = PARAMN)\n\n#---- Derive additional baselines from VS ----\n\nadpc_baselines &lt;- adpc_aseq %&gt;%\n  derive_vars_merged(\n    dataset_add = vs,\n    filter_add = VSTESTCD == \"HEIGHT\",\n    by_vars = exprs(STUDYID, USUBJID),\n    new_vars = exprs(HTBL = VSSTRESN, HTBLU = VSSTRESU)\n  ) %&gt;%\n  derive_vars_merged(\n    dataset_add = vs,\n    filter_add = VSTESTCD == \"WEIGHT\" & VSBLFL == \"Y\",\n    by_vars = exprs(STUDYID, USUBJID),\n    new_vars = exprs(WTBL = VSSTRESN, WTBLU = VSSTRESU)\n  ) %&gt;%\n  mutate(\n    BMIBL = compute_bmi(height = HTBL, weight = WTBL),\n    BMIBLU = \"kg/m^2\"\n  )\n\n# ---- Add all ADSL variables ----\n\n# Add all ADSL variables\nadpc_prefinal &lt;- adpc_baselines %&gt;%\n  derive_vars_merged(\n    dataset_add = select(adsl, !!!negate_vars(adsl_vars)),\n    by_vars = exprs(STUDYID, USUBJID)\n  )\n\n# Final Steps, Select final variables and Add labels\n# This process will be based on your metadata, no example given for this reason\n# ...\n\ndir &lt;- \"./output\"\n\n# Apply metadata and perform associated checks ----\n# uses {metatools}\nadpc &lt;- attrib_func(adpc_prefinal,metacore)\n\n# xpt export function\nexport_xpt(adpc,metacore,dir,dsname)\n  \n# ---- Save output ----\n\n# parquet format\nwrite_parquet(\n  adpc, paste(paste(dir,\"adpc\",sep=\"/\"),\"gz.parquet\",sep=\".\")\n              , compression = \"gzip\", compression_level = 5)\n\nexport(adsl, \"./output/adsl.xpt\")\n\nwrite_parquet(\n  adpc, paste(paste(dir,\"adsl\",sep=\"/\"),\"gz.parquet\",sep=\".\")\n              , compression = \"gzip\", compression_level = 5)"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "pharmaverse\nTables in Clinical Trials with R\nR Programming and Pharmaceutical Data Analysis (Packages for Clinical Trial Data)"
  },
  {
    "objectID": "r-env.html",
    "href": "r-env.html",
    "title": "2  Rプログラムの開発環境とその周辺",
    "section": "",
    "text": "Rstudioとgitを用いた開発環境を前提とする。\n\n2.0.1 server or desktop\n\nRstudio Server\n\nサーバー環境下\n仮想環境下\n\nRstudio Desktop\n\n\n\n2.0.2 パッケージ管理\n\nrproject\nrenv\ncheckpoint\n\n\n\n2.0.3 推奨初期設定\n\npacman\nrio\ntidyverse"
  },
  {
    "objectID": "tidyverse.html",
    "href": "tidyverse.html",
    "title": "3  Tidyverseの説明",
    "section": "",
    "text": "https://uribo.github.io/230827ism_ws/\n\n3.0.1 dplyrの説明\n\n\n3.0.2 tidyrの説明"
  },
  {
    "objectID": "nca.html",
    "href": "nca.html",
    "title": "6  NCAの実施",
    "section": "",
    "text": "# CRAN から入手可能なパッケージ\n##############################\npacman::p_load(\n  # 一般的なデータ管理\n  ####################\n  tidyverse, \n  magrittr, \n  \n  # パッケージのインストールと管理\n  ################################\n  pacman,   # パッケージのインストール・読み込み\n  renv,     # グループで作業する際のパッケージのバージョン管理  \n  \n  # プロジェクトとファイルの管理\n  ##############################\n  here,     # Rのプロジェクトフォルダを基準とするファイルパス\n  rio,      # 様々なタイプのデータのインポート・エクスポート\n  \n  # 臨床薬理領域系の解析パッケージ\n  ################################\n  NonCompart, # NCA処理するバッケージ\n  ncar,       # NonCompartの拡張版\n  \n  # CDISC ADaM関連パッケージ\n  ##########################\n  Tplyr,     # Rのプロジェクトフォルダを基準とするファイルパス\n\n  # スタイルテーブル関連パッケージ\n  ################################\n  huxtable,  # HTML, LaTeX, RTF, 'Word', 'Excel', and 'PowerPoint'へ変換可能なスタイル\n  \n  # 図表関連パッケージ\n  ####################\n  patchwork, # 複数の図表をまとめられるパッケージ\n  \n  # 出力形式関連パッケージ\n  ########################\n  pharmaRTF  # 医薬品申請関連資料の出力用パッケージ\n)\n\n\nadsl &lt;- import(\"./output/adsl.xpt\")\nadpc &lt;- import(\"./output/adpc.xpt\")\n\n## Xanomeline Low Dose\nnca_low  &lt;- adpc %&gt;%\n  filter(TRT01A==\"Xanomeline Low Dose\" & \n        PARAMCD==\"XAN\" & ATPTREF==\"Day 1\") %&gt;%\n  tblNCA(  .\n         , key     = \"SUBJID\"\n         , colTime = \"MRRLT\"\n         , colConc = \"AVAL\"\n         , dose    =  54\n         , adm     = \"Extravascular\"\n         , dur     =  0\n         , doseUnit = \"mg\"\n         , timeUnit = \"h\"\n         , concUnit = \"ug/mL\"\n         , down     = \"Linear\") %&gt;%\n  mutate(TRT01A=\"Xanomeline Low Dose\")\n\n## Xanomeline High Dose\nnca_hi  &lt;- adpc %&gt;%\n  filter(TRT01A==\"Xanomeline High Dose\" & \n        PARAMCD==\"XAN\" & ATPTREF==\"Day 1\") %&gt;%\n  tblNCA(  .\n         , key     = \"SUBJID\"\n         , colTime = \"MRRLT\"\n         , colConc = \"AVAL\"\n         , dose    =  81\n         , adm     = \"Extravascular\"\n         , dur     =  0\n         , doseUnit = \"mg\"\n         , timeUnit = \"h\"\n         , concUnit = \"ug/mL\"\n         , down     = \"Linear\") %&gt;%\n  mutate(TRT01A=\"Xanomeline High Dose\")\n\nnca &lt;- rbind(nca_low, nca_hi )\n\n\nnca_t  &lt;- nca %&gt;% \n  pivot_longer(-c(SUBJID,TRT01A), names_to = \"PARAMCD\", values_to = \"AVAL\") %&gt;%\n  mutate(TRT01A = factor(TRT01A,c(\"Xanomeline Low Dose\",\"Xanomeline High Dose\")))\n\nprec_data &lt;- tibble::tribble(\n  ~PARAMCD, ~max_int, ~max_dec,\n  \"CMAX\"    ,   2, 1,\n  \"AUCLST\"  ,   4, 1,\n  \"AUCIFO\"  ,   4, 1,\n  \"TMAX\"    ,   2, 2,\n  \"MRTEVIFO\",   3, 1,\n  \"LAMZHL\"  ,   2, 2,\n  ) %&gt;%\n  mutate(PARAMCD = factor(PARAMCD,c(\"CMAX\",\"AUCLST\",\"AUCIFO\",\"TMAX\",\"LAMZHL\",\"MRTEVIFO\")))\n\nheader_data &lt;- adsl %&gt;%\n  filter(SAFFL == \"Y\" & TRT01A %in% c(\"Xanomeline Low Dose\",\"Xanomeline High Dose\")) %&gt;%\n  mutate(TRT01A = factor(TRT01A,c(\"Xanomeline Low Dose\",\"Xanomeline High Dose\"))) %&gt;%\n  group_by(TRT01A) %&gt;%\n  summarise(n=n()) \n\nnca_summary &lt;- nca_t %&gt;%\n  filter(PARAMCD %in% c(\"CMAX\",\"AUCLST\",\"AUCIFO\",\"TMAX\",\"MRTEVIFO\",\"LAMZHL\")) %&gt;%\n  mutate(PARAMCD = factor(PARAMCD,c(\"CMAX\",\"AUCLST\",\"AUCIFO\",\"TMAX\",\"LAMZHL\",\"MRTEVIFO\"))) %&gt;%\n  tplyr_table(.,TRT01A) %&gt;%\n    add_layer(\n      group_desc(AVAL, by = PARAMCD) %&gt;% \n        set_custom_summaries(\n          CV = (mean(.var) / sd(.var)) * 100\n         ,geometric_mean = exp(sum(log(.var[.var &gt; 0]), na.rm=TRUE) / length(.var))\n         ,CV_geo_mean = (sqrt(exp(var(log(.var[.var &gt; 0])-1)))) * 100\n        ) %&gt;%\n        set_format_strings(\n           'N'            = f_str('xx'   , n)\n          ,'Mean (SD)'    = f_str('a.a+1 (a.a+2)', mean, sd)\n          ,'CV% mean'     = f_str('a.a+1', CV)\n          ,'Geo-mean'     = f_str('a.a+1', geometric_mean)\n          ,'CV% Geo-mean' = f_str('a.a+1', CV_geo_mean)\n          ,'Median'       = f_str('a.a+1', median)\n          ,'[Min; Max]'   = f_str('[a.a+0; a.a+0]', min, max)\n        ) %&gt;% \n        set_precision_on(AVAL) %&gt;% \n        set_precision_by(PARAMCD) %&gt;%\n        set_precision_data(prec_data)\n    ) %&gt;%\n    build()\n\nnca_summary2 &lt;- nca_summary %&gt;%\n    mutate(row_label1 = case_when(\n      row_label1 == \"CMAX\" ~ \"Cmax\"\n     ,row_label1 == \"AUCLST\" ~ \"AUC last\"\n     ,row_label1 == \"AUCIFO\" ~ \"AUC Inf\"\n     ,row_label1 == \"TMAX\"~ \"tmax\"\n     ,row_label1 == \"LAMZHL\"~ \"t1/2\"\n     ,row_label1 == \"MRTEVIFO\" ~ \"MRT\"\n     ,TRUE ~ \"\"\n    )) %&gt;%\n    apply_row_masks(row_breaks = TRUE) %&gt;%   \n    select(-starts_with(\"ord\")) %&gt;% \n    add_column_headers(\n      paste0(\" | | Xanomeline \\\\line Low Dose(54mg)\"\n             ,\"\\\\line(N=**Xanomeline Low Dose**)| \"\n             ,\"Xanomeline \\\\line High Dose(81mg)\"\n             ,\"\\\\line(N=**Xanomeline High Dose**) \"), \n      header_n = header_data) \n\nht &lt;- nca_summary2 %&gt;% \n  huxtable::as_hux(., add_colnames=FALSE) %&gt;%\n  huxtable::set_bold(1, 1:ncol(.), TRUE) %&gt;% # bold the first row\n  huxtable::set_align(1, 1:ncol(.), 'center') %&gt;% # Center align the first row \n  huxtable::set_align(2:nrow(.), 3:ncol(.), 'center') %&gt;% # Center align the results\n  huxtable::set_valign(1, 1:ncol(.), 'bottom') %&gt;% # Bottom align the first row\n  huxtable::set_bottom_border(1, 1:ncol(.), 1) %&gt;% # Put a border under the first row\n  huxtable::set_width(1.5) %&gt;% # Set the table width\n  huxtable::set_escape_contents(FALSE) %&gt;% # Don't escape RTF syntax\n  huxtable::set_col_width(c(.2, .2, .2, .2)) # Set the column widths\nht\n\n\n\n\n\n\n\n\n\n\n\n\nXanomeline \\line Low Dose(54mg)\\line(N=96)\nXanomeline \\line High Dose(81mg)\\line(N=72)\n\n\nCmax\nN\n96\n72\n\n\n\nMean (SD)\n1.84 ( 0.055)\n1.84 ( 0.055)\n\n\n\nCV% mean\n3363.89\n3373.81\n\n\n\nGeo-mean\n1.84\n1.84\n\n\n\nCV% Geo-mean\n100.04\n100.04\n\n\n\nMedian\n1.84\n1.84\n\n\n\n[Min; Max]\n[ 1.8; 1.9]\n[ 1.8; 1.9]\n\n\nAUC last\nN\n96\n72\n\n\n\nMean (SD)\n18.97 ( 0.560)\n18.95 ( 0.584)\n\n\n\nCV% mean\n3389.53\n3244.87\n\n\n\nGeo-mean\n18.96\n18.94\n\n\n\nCV% Geo-mean\n100.04\n100.05\n\n\n\nMedian\n18.87\n19.02\n\n\n\n[Min; Max]\n[ 18.0; 20.0]\n[ 18.0; 20.0]\n\n\nAUC Inf\nN\n96\n72\n\n\n\nMean (SD)\n19.02 ( 0.562)\n19.00 ( 0.589)\n\n\n\nCV% mean\n3386.36\n3226.24\n\n\n\nGeo-mean\n19.01\n18.99\n\n\n\nCV% Geo-mean\n100.04\n100.05\n\n\n\nMedian\n18.91\n19.08\n\n\n\n[Min; Max]\n[ 18.1; 20.0]\n[ 18.0; 20.1]\n\n\ntmax\nN\n96\n72\n\n\n\nMean (SD)\n8.000 ( 0.0000)\n8.000 ( 0.0000)\n\n\n\nCV% mean\nInf\nInf\n\n\n\nGeo-mean\n8.000\n8.000\n\n\n\nCV% Geo-mean\n100.000\n100.000\n\n\n\nMedian\n8.000\n8.000\n\n\n\n[Min; Max]\n[ 8.00; 8.00]\n[ 8.00; 8.00]\n\n\nt1/2\nN\n96\n72\n\n\n\nMean (SD)\n2.346 ( 0.4380)\n2.293 ( 0.0981)\n\n\n\nCV% mean\n535.694\n2336.778\n\n\n\nGeo-mean\n2.322\n2.291\n\n\n\nCV% Geo-mean\n100.805\n100.092\n\n\n\nMedian\n2.281\n2.290\n\n\n\n[Min; Max]\n[ 2.14; 5.35]\n[ 2.14; 2.45]\n\n\nMRT\nN\n96\n72\n\n\n\nMean (SD)\n6.83 ( 0.132)\n6.83 ( 0.129)\n\n\n\nCV% mean\n5165.95\n5286.80\n\n\n\nGeo-mean\n6.83\n6.83\n\n\n\nCV% Geo-mean\n100.02\n100.02\n\n\n\nMedian\n6.82\n6.83\n\n\n\n[Min; Max]\n[ 6.6; 7.3]\n[ 6.6; 7.0]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndoc &lt;- pharmaRTF::rtf_doc(ht) %&gt;% \n  pharmaRTF::add_titles(\n    pharmaRTF::hf_line(\"Protocol: CDISCPILOT01\", \"PAGE_FORMAT: Page %s of %s\", align='split', bold=TRUE, italic=TRUE),\n    pharmaRTF::hf_line(\"Table 14-2.01\", align='center', bold=TRUE, italic=TRUE),\n    pharmaRTF::hf_line(\"Summary of Demographic and Baseline Characteristics\", align='center', bold=TRUE, italic=TRUE)\n  ) %&gt;% \n  pharmaRTF::add_footnotes(\n    pharmaRTF::hf_line(\"FILE_PATH: Source: %s\", \"DATE_FORMAT: %H:%M %A, %B %d, %Y\", align='split', bold=FALSE, italic=TRUE)\n  ) %&gt;% \n  pharmaRTF::set_font_size(10) %&gt;%\n  pharmaRTF::set_ignore_cell_padding(TRUE) %&gt;% \n  pharmaRTF::set_column_header_buffer(top=1)\n\npharmaRTF::write_rtf(doc, file='example1.rtf')\n\n################################################################################################\n\np1 &lt;- adpc %&gt;% \n  filter(TRT01A==\"Xanomeline Low Dose\" & \n        PARAMCD==\"XAN\" & ATPTREF==\"Day 1\") %&gt;%\n  ggplot(.,aes(x=MRRLT,y=AVAL,group=SUBJID))+\n  theme_set(theme_classic()) +\n  geom_line(aes(linetype = SUBJID))+\n  ggtitle(\"Linier view\") +\n  xlab(\"Time (h)\")+\n  ylab(\"Concentration (mg/L)\")+\n  theme_bw()+ \n  theme(legend.position = \"none\",plot.title = element_text(hjust = 0.5)) \n\np2&lt;- adpc %&gt;% \n  filter(TRT01A==\"Xanomeline Low Dose\" & \n        PARAMCD==\"XAN\" & ATPTREF==\"Day 1\") %&gt;%\n  ggplot(.,aes(x=MRRLT,y=AVAL,group=SUBJID))+\n  theme_set(theme_classic()) +\n  geom_line(aes(linetype = SUBJID))+\n  geom_abline(intercept = log10(0.01), slope = 0,linetype = 2) +\n  annotate(\"text\", x=17, y=0.02, label=\"BLQ\")+\n  ggtitle(\"Semilogarithmic view\") +\n  xlab(\"Time (h)\")+\n  scale_y_continuous(trans='log10')+\n  ylab(\"Concentration (mg/L)\")+\n  theme_bw()+ \n  theme(legend.position = \"none\",plot.title = element_text(hjust = 0.5))\n\np1 + p2\n\n\n\np3 &lt;- adpc %&gt;% \n  filter(TRT01A==\"Xanomeline High Dose\" & \n        PARAMCD==\"XAN\" & ATPTREF==\"Day 1\") %&gt;%\n  ggplot(.,aes(x=MRRLT,y=AVAL,group=SUBJID))+\n  theme_set(theme_classic()) +\n  geom_line(aes(linetype = SUBJID))+\n  ggtitle(\"Linier view\") +\n  xlab(\"Time (h)\")+\n  ylab(\"Concentration (mg/L)\")+\n  theme_bw()+ \n  theme(legend.position = \"none\",plot.title = element_text(hjust = 0.5)) \n\np4 &lt;- adpc %&gt;% \n  filter(TRT01A==\"Xanomeline High Dose\" & \n        PARAMCD==\"XAN\" & ATPTREF==\"Day 1\") %&gt;%\n  ggplot(.,aes(x=MRRLT,y=AVAL,group=SUBJID))+\n  theme_set(theme_classic()) +\n  geom_line(aes(linetype = SUBJID))+\n  geom_abline(intercept = log10(0.01), slope = 0,linetype = 2) +\n  annotate(\"text\", x=17, y=0.02, label=\"BLQ\")+\n  ggtitle(\"Semilogarithmic view\") +\n  xlab(\"Time (h)\")+\n  scale_y_continuous(trans='log10')+\n  ylab(\"Concentration (mg/L)\")+\n  theme_bw()+ \n  theme(legend.position = \"none\",plot.title = element_text(hjust = 0.5)) \n\np3 + p4"
  },
  {
    "objectID": "nca_flow.html",
    "href": "nca_flow.html",
    "title": "7  NCA実施の事例",
    "section": "",
    "text": "# CRAN から入手可能なパッケージ\n##############################\npacman::p_load(\n  # 一般的なデータ管理\n  ####################\n  tidyverse, \n  magrittr, \n  \n  # パッケージのインストールと管理\n  ################################\n  pacman,   # パッケージのインストール・読み込み\n  renv,     # グループで作業する際のパッケージのバージョン管理  \n  \n  # プロジェクトとファイルの管理\n  ##############################\n  here,     # Rのプロジェクトフォルダを基準とするファイルパス\n  rio,      # 様々なタイプのデータのインポート・エクスポート\n  \n  # 臨床薬理領域系の解析パッケージ\n  ################################\n  NonCompart, # NCA処理するバッケージ\n  ncar        # NonCompartの拡張版\n)\n\n\nadsl &lt;- import(\"./output/adsl.xpt\")\nadpc &lt;- import(\"./output/adpc.xpt\")\n\n## Xanomeline Low Dose\nnca_low  &lt;- adpc %&gt;%\n  filter(TRT01A==\"Xanomeline Low Dose\" & \n        PARAMCD==\"XAN\" & ATPTREF==\"Day 1\") %&gt;%\n  tblNCA(  .\n         , key     = \"SUBJID\"\n         , colTime = \"MRRLT\"\n         , colConc = \"AVAL\"\n         , dose    =  54\n         , adm     = \"Extravascular\"\n         , dur     =  0\n         , doseUnit = \"mg\"\n         , timeUnit = \"h\"\n         , concUnit = \"ug/mL\"\n         , down     = \"Linear\") %&gt;%\n  mutate(TRT01A=\"Xanomeline Low Dose\")\n\n## Xanomeline High Dose\nnca_hi  &lt;- adpc %&gt;%\n  filter(TRT01A==\"Xanomeline High Dose\" & \n        PARAMCD==\"XAN\" & ATPTREF==\"Day 1\") %&gt;%\n  tblNCA(  .\n         , key     = \"SUBJID\"\n         , colTime = \"MRRLT\"\n         , colConc = \"AVAL\"\n         , dose    =  81\n         , adm     = \"Extravascular\"\n         , dur     =  0\n         , doseUnit = \"mg\"\n         , timeUnit = \"h\"\n         , concUnit = \"ug/mL\"\n         , down     = \"Linear\") %&gt;%\n  mutate(TRT01A=\"Xanomeline High Dose\")\n\n# output\nnca &lt;- rbind(nca_low, nca_hi )\nexport(nca, \"./output/nca.sas7bdat\")"
  },
  {
    "objectID": "output_flow.html",
    "href": "output_flow.html",
    "title": "9  TLG作成の事例",
    "section": "",
    "text": "# CRAN から入手可能なパッケージ\n##############################\npacman::p_load(\n  # 一般的なデータ管理\n  ####################\n  tidyverse, \n  magrittr, \n  \n  # パッケージのインストールと管理\n  ################################\n  pacman,   # パッケージのインストール・読み込み\n  renv,     # グループで作業する際のパッケージのバージョン管理  \n  \n  # プロジェクトとファイルの管理\n  ##############################\n  here,     # Rのプロジェクトフォルダを基準とするファイルパス\n  rio,      # 様々なタイプのデータのインポート・エクスポート\n  \n  # CDISC ADaM関連パッケージ\n  ##########################\n  Tplyr,     # Rのプロジェクトフォルダを基準とするファイルパス\n\n  # スタイルテーブル関連パッケージ\n  ################################\n  huxtable,  # html,LaTeX,rtf,docx,xlsx and pptxへ変換可能なスタイル\n  \n  # 図表関連パッケージ\n  ####################\n  patchwork, # 複数の図表をまとめられるパッケージ\n  \n  # 出力形式関連パッケージ\n  ########################\n  pharmaRTF  # 医薬品申請関連資料の出力用パッケージ\n)\n\n\nnca  &lt;- import(\"./output/nca.sas7bdat\")\nadsl &lt;- import(\"./output/adsl.xpt\")\nadpc &lt;- import(\"./output/adpc.xpt\")\n\nnca_t  &lt;- nca %&gt;% \n  pivot_longer(  -c(SUBJID,TRT01A)\n               , names_to = \"PARAMCD\"\n               , values_to = \"AVAL\") %&gt;%\n  mutate(TRT01A = factor( TRT01A\n                         ,c( \"Xanomeline Low Dose\"\n                            ,\"Xanomeline High Dose\")))\n\nprec_data &lt;- tibble::tribble(\n  ~PARAMCD, ~max_int, ~max_dec,\n  \"CMAX\"    ,   2, 1,\n  \"AUCLST\"  ,   4, 1,\n  \"AUCIFO\"  ,   4, 1,\n  \"TMAX\"    ,   2, 2,\n  \"MRTEVIFO\",   3, 1,\n  \"LAMZHL\"  ,   2, 2,\n  ) %&gt;%\n  mutate(PARAMCD = factor(PARAMCD\n                          ,c( \"CMAX\",\"AUCLST\",\"AUCIFO\"\n                             ,\"TMAX\",\"LAMZHL\",\"MRTEVIFO\")))\n\nheader_data &lt;- adsl %&gt;%\n  filter(\n    SAFFL == \"Y\" & \n    TRT01A %in% c(\"Xanomeline Low Dose\",\"Xanomeline High Dose\")) %&gt;%\n  mutate(\n    TRT01A = factor( TRT01A\n                    ,c( \"Xanomeline Low Dose\"\n                       ,\"Xanomeline High Dose\"))) %&gt;%\n  group_by(TRT01A) %&gt;%\n  summarise(n=n()) \n\nnca_summary &lt;- nca_t %&gt;%\n  filter(PARAMCD %in% c( \"CMAX\",\"AUCLST\",\"AUCIFO\"\n                        ,\"TMAX\",\"MRTEVIFO\",\"LAMZHL\")) %&gt;%\n  mutate(PARAMCD = factor( PARAMCD\n                          ,c( \"CMAX\",\"AUCLST\",\"AUCIFO\"\n                             ,\"TMAX\",\"LAMZHL\",\"MRTEVIFO\"))) %&gt;%\n  tplyr_table(.,TRT01A) %&gt;%\n    add_layer(\n      group_desc(AVAL, by = PARAMCD) %&gt;% \n        set_custom_summaries(\n          CV = (mean(.var) / sd(.var)) * 100\n         ,geometric_mean = exp(sum( log(.var[.var &gt; 0])\n                                   , na.rm=TRUE) / length(.var))\n         ,CV_geo_mean = (sqrt(exp(var(log(.var[.var &gt; 0])-1)))) * 100\n        ) %&gt;%\n        set_format_strings(\n           'N'            = f_str('xx'   , n)\n          ,'Mean (SD)'    = f_str('a.a+1 (a.a+2)', mean, sd)\n          ,'CV% mean'     = f_str('a.a+1', CV)\n          ,'Geo-mean'     = f_str('a.a+1', geometric_mean)\n          ,'CV% Geo-mean' = f_str('a.a+1', CV_geo_mean)\n          ,'Median'       = f_str('a.a+1', median)\n          ,'[Min; Max]'   = f_str('[a.a+0; a.a+0]', min, max)\n        ) %&gt;% \n        set_precision_on(AVAL) %&gt;% \n        set_precision_by(PARAMCD) %&gt;%\n        set_precision_data(prec_data)\n    ) %&gt;%\n    build()\n\nnca_summary2 &lt;- nca_summary %&gt;%\n    mutate(row_label1 = case_when(\n      row_label1 == \"CMAX\" ~ \"Cmax\"\n     ,row_label1 == \"AUCLST\" ~ \"AUC last\"\n     ,row_label1 == \"AUCIFO\" ~ \"AUC Inf\"\n     ,row_label1 == \"TMAX\"~ \"tmax\"\n     ,row_label1 == \"LAMZHL\"~ \"t1/2\"\n     ,row_label1 == \"MRTEVIFO\" ~ \"MRT\"\n     ,TRUE ~ \"\"\n    )) %&gt;%\n    apply_row_masks(row_breaks = TRUE) %&gt;%   \n    select(-starts_with(\"ord\")) %&gt;% \n    add_column_headers(\n      paste0(\" | | Xanomeline \\\\line Low Dose(54mg)\"\n             ,\"\\\\line(N=**Xanomeline Low Dose**)| \"\n             ,\"Xanomeline \\\\line High Dose(81mg)\"\n             ,\"\\\\line(N=**Xanomeline High Dose**) \"), \n      header_n = header_data) \n\nht &lt;- nca_summary2 %&gt;% \n  huxtable::as_hux(., add_colnames=FALSE) %&gt;%\n  # bold the first row\n  huxtable::set_bold(1, 1:ncol(.), TRUE) %&gt;% \n  # Center align the first row \n  huxtable::set_align(1, 1:ncol(.), 'center') %&gt;% \n  # Center align the results\n  huxtable::set_align(2:nrow(.), 3:ncol(.), 'center') %&gt;%\n  # Bottom align the first row\n  huxtable::set_valign(1, 1:ncol(.), 'bottom') %&gt;% \n  # Put a border under the first row\n  huxtable::set_bottom_border(1, 1:ncol(.), 1) %&gt;% \n  # Set the table width\n  huxtable::set_width(1.5) %&gt;% \n  # Don't escape RTF syntax\n  huxtable::set_escape_contents(FALSE) %&gt;% \n  # Set the column widths\n  huxtable::set_col_width(c(.2, .2, .2, .2)) \nht\n\n\n\n\n\n\n\n\n\n\n\n\nXanomeline \\line Low Dose(54mg)\\line(N=96)\nXanomeline \\line High Dose(81mg)\\line(N=72)\n\n\nCmax\nN\n96\n72\n\n\n\nMean (SD)\n1.84 ( 0.055)\n1.84 ( 0.055)\n\n\n\nCV% mean\n3363.89\n3373.81\n\n\n\nGeo-mean\n1.84\n1.84\n\n\n\nCV% Geo-mean\n100.04\n100.04\n\n\n\nMedian\n1.84\n1.84\n\n\n\n[Min; Max]\n[ 1.8; 1.9]\n[ 1.8; 1.9]\n\n\nAUC last\nN\n96\n72\n\n\n\nMean (SD)\n18.97 ( 0.560)\n18.95 ( 0.584)\n\n\n\nCV% mean\n3389.53\n3244.87\n\n\n\nGeo-mean\n18.96\n18.94\n\n\n\nCV% Geo-mean\n100.04\n100.05\n\n\n\nMedian\n18.87\n19.02\n\n\n\n[Min; Max]\n[ 18.0; 20.0]\n[ 18.0; 20.0]\n\n\nAUC Inf\nN\n96\n72\n\n\n\nMean (SD)\n19.02 ( 0.562)\n19.00 ( 0.589)\n\n\n\nCV% mean\n3386.36\n3226.24\n\n\n\nGeo-mean\n19.01\n18.99\n\n\n\nCV% Geo-mean\n100.04\n100.05\n\n\n\nMedian\n18.91\n19.08\n\n\n\n[Min; Max]\n[ 18.1; 20.0]\n[ 18.0; 20.1]\n\n\ntmax\nN\n96\n72\n\n\n\nMean (SD)\n8.000 ( 0.0000)\n8.000 ( 0.0000)\n\n\n\nCV% mean\nInf\nInf\n\n\n\nGeo-mean\n8.000\n8.000\n\n\n\nCV% Geo-mean\n100.000\n100.000\n\n\n\nMedian\n8.000\n8.000\n\n\n\n[Min; Max]\n[ 8.00; 8.00]\n[ 8.00; 8.00]\n\n\nt1/2\nN\n96\n72\n\n\n\nMean (SD)\n2.346 ( 0.4380)\n2.293 ( 0.0981)\n\n\n\nCV% mean\n535.694\n2336.778\n\n\n\nGeo-mean\n2.322\n2.291\n\n\n\nCV% Geo-mean\n100.805\n100.092\n\n\n\nMedian\n2.281\n2.290\n\n\n\n[Min; Max]\n[ 2.14; 5.35]\n[ 2.14; 2.45]\n\n\nMRT\nN\n96\n72\n\n\n\nMean (SD)\n6.83 ( 0.132)\n6.83 ( 0.129)\n\n\n\nCV% mean\n5165.95\n5286.80\n\n\n\nGeo-mean\n6.83\n6.83\n\n\n\nCV% Geo-mean\n100.02\n100.02\n\n\n\nMedian\n6.82\n6.83\n\n\n\n[Min; Max]\n[ 6.6; 7.3]\n[ 6.6; 7.0]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndoc &lt;- pharmaRTF::rtf_doc(ht) %&gt;% \n  pharmaRTF::add_titles(\n    pharmaRTF::hf_line( \"Protocol: CDISCPILOT01\"\n                       , \"PAGE_FORMAT: Page %s of %s\"\n                       , align='split', bold=TRUE, italic=TRUE),\n    pharmaRTF::hf_line( \"Table 14-2.01\"\n                       , align='center', bold=TRUE, italic=TRUE),\n    pharmaRTF::hf_line( \"Summary of Demographic and Baseline Characteristics\"\n                       , align='center', bold=TRUE, italic=TRUE)\n  ) %&gt;% \n  pharmaRTF::add_footnotes(\n    pharmaRTF::hf_line( \"FILE_PATH: Source: %s\"\n                       , \"DATE_FORMAT: %H:%M %A, %B %d, %Y\"\n                       , align='split'\n                       , bold=FALSE\n                       , italic=TRUE)\n  ) %&gt;% \n  pharmaRTF::set_font_size(10) %&gt;%\n  pharmaRTF::set_ignore_cell_padding(TRUE) %&gt;% \n  pharmaRTF::set_column_header_buffer(top=1)\n\npharmaRTF::write_rtf(doc, file='./output/table_14.2.01.rtf')\n\n################################################################################\n\np1 &lt;- adpc %&gt;% \n  filter(TRT01A==\"Xanomeline Low Dose\" & \n        PARAMCD==\"XAN\" & ATPTREF==\"Day 1\") %&gt;%\n  ggplot(.,aes(x=MRRLT,y=AVAL,group=SUBJID))+\n  theme_set(theme_classic()) +\n  geom_line(aes(linetype = SUBJID))+\n  ggtitle(\"Linier view\") +\n  xlab(\"Time (h)\")+\n  coord_cartesian(xlim = c(0, 25))+\n  ylab(\"Concentration (mg/L)\")+\n  theme_bw()+ \n  theme(legend.position = \"none\",plot.title = element_text(hjust = 0.5)) \n\np2&lt;- adpc %&gt;% \n  filter(TRT01A==\"Xanomeline Low Dose\" & \n        PARAMCD==\"XAN\" & ATPTREF==\"Day 1\") %&gt;%\n  ggplot(.,aes(x=MRRLT,y=AVAL,group=SUBJID))+\n  theme_set(theme_classic()) +\n  geom_line(aes(linetype = SUBJID))+\n  geom_abline(intercept = log10(0.01), slope = 0,linetype = 2) +\n  annotate(\"text\", x=17, y=0.02, label=\"BLQ\")+\n  ggtitle(\"Semilogarithmic view\") +\n  xlab(\"Time (h)\")+\n  coord_cartesian(xlim = c(0, 25))+\n  scale_y_continuous(trans='log10')+\n  ylab(\"Concentration (mg/L)\")+\n  theme_bw()+ \n  theme(legend.position = \"none\",plot.title = element_text(hjust = 0.5))\n\np1 + p2\n\n\n\np3 &lt;- adpc %&gt;% \n  filter(TRT01A==\"Xanomeline High Dose\" & \n        PARAMCD==\"XAN\" & ATPTREF==\"Day 1\") %&gt;%\n  ggplot(.,aes(x=MRRLT,y=AVAL,group=SUBJID))+\n  theme_set(theme_classic()) +\n  geom_line(aes(linetype = SUBJID))+\n  ggtitle(\"Linier view\") +\n  xlab(\"Time (h)\")+\n  coord_cartesian(xlim = c(0, 25))+\n  ylab(\"Concentration (mg/L)\")+\n  theme_bw()+ \n  theme(legend.position = \"none\",plot.title = element_text(hjust = 0.5)) \n\np4 &lt;- adpc %&gt;% \n  filter(TRT01A==\"Xanomeline High Dose\" & \n        PARAMCD==\"XAN\" & ATPTREF==\"Day 1\") %&gt;%\n  ggplot(.,aes(x=MRRLT,y=AVAL,group=SUBJID))+\n  theme_set(theme_classic()) +\n  geom_line(aes(linetype = SUBJID))+\n  geom_abline(intercept = log10(0.01), slope = 0,linetype = 2) +\n  annotate(\"text\", x=17, y=0.02, label=\"BLQ\")+\n  ggtitle(\"Semilogarithmic view\") +\n  xlab(\"Time (h)\")+\n  coord_cartesian(xlim = c(0, 25))+\n  scale_y_continuous(trans='log10')+\n  ylab(\"Concentration (mg/L)\")+\n  theme_bw()+ \n  theme(legend.position = \"none\",plot.title = element_text(hjust = 0.5)) \n\np3 + p4"
  },
  {
    "objectID": "adnca_flow.html",
    "href": "adnca_flow.html",
    "title": "5  ADNCAの作例手順",
    "section": "",
    "text": "# CRAN から入手可能なパッケージ\n##############################\npacman::p_load(\n  # 一般的なデータ管理\n  ####################\n  tidyverse, \n  magrittr, \n  \n  # パッケージのインストールと管理\n  ################################\n  pacman,   # パッケージのインストール・読み込み\n  renv,     # グループで作業する際のパッケージのバージョン管理  \n  \n  # プロジェクトとファイルの管理\n  ##############################\n  here,     # Rのプロジェクトフォルダを基準とするファイルパス\n  rio,      # 様々なタイプのデータのインポート・エクスポート\n  \n  # admiral関連パッケージ\n  ################################\n  admiral, # シミュレーション/C++へコンパイルで必須\n  metacore,   # 非線形混合モデル解析パッケージ\n  metatools,     # 解析結果でgofプロット作成に必須\n  xportr, # 解析結果でgofプロット作成に必須\n  pharmaversesdtm,\n  \n  # other\n  ################################\n  styler,\n  arrow\n)\n\n\n5.0.1 Data import\n\n# ---- Load Specs for Metacore ----\npath &lt;- here::here()\nmetacore &lt;- spec_to_metacore(file.path(path,\"meta\",\"pk_spec.xlsx\")) %&gt;%\n  select_dataset(\"ADPC\")\n\n# ---- Load source datasets ----\n\n# Use e.g. haven::read_sas to read in .sas7bdat, or other suitable functions\n# as needed and assign to the variables below.\n# For illustration purposes read in admiral test data\n\n# Load PC, EX, VS and ADSL\ndata(\"pc\")\ndata(\"ex\")\ndata(\"vs\")\n\ndata(\"admiral_adsl\")\n\nadsl &lt;- admiral_adsl\nex   &lt;- convert_blanks_to_na(ex)\npc   &lt;- convert_blanks_to_na(pc)\nvs   &lt;- convert_blanks_to_na(vs)\n\ndsname &lt;- \"ADPC\"\n\n\n\n5.0.2 rlang metaprogramming\n\n# attrib function\nattrib_func &lt;- function(data,var){\n  if (requireNamespace(\"metatools\", quietly = T)) {\n  data %&gt;%\n    # Drop unspecified variables from specs\n    metatools::drop_unspec_vars({{var}}) %&gt;%\n    # Check all variables specified are present and no more\n    metatools::check_variables({{var}}) %&gt;%\n    # Checks all variables with CT only contain values within the CT.\n    metatools::check_ct_data({{var}}) %&gt;%\n    # Orders the columns according to the spec\n    metatools::order_cols({{var}}) %&gt;%\n    # Sorts the rows by the sort keys\n    metatools::sort_by_key({{var}})\n  }\n  else {\n    stop(\"Required 'metatools' package.\")\n  }\n}\n\n# xpt export function\nexport_xpt &lt;- function(data,var,dir,dsname){\n  if (requireNamespace(\"xportr\", quietly = T)) {\n    data %&gt;%\n      # Coerce variable type to match spec\n      xportr::xportr_type({{var}}) %&gt;%\n      # Assigns SAS length from a variable level metadata\n      xportr::xportr_length({{var}}) %&gt;%\n      # Assigns variable label from metacore specifications\n      xportr::xportr_label({{var}}) %&gt;%\n      # Assigns variable format from metacore specifications\n      xportr::xportr_format({{var}}) %&gt;%\n      # Assigns dataset label from metacore specifications\n      xportr::xportr_df_label({{var}}) %&gt;%\n      # Write xpt v5 transport file\n      xportr::xportr_write(\n        file.path(\n           {{dir}}\n          ,paste(\n             tolower({{dsname}})\n            ,\"xpt\"\n            ,sep=\".\")\n        )\n      ) \n  }\n  else {\n    stop(\"Required 'xportr' package.\")\n  }\n}\n\n\n\n5.0.3 Convertion ADNCA\n\n# ---- Derivations ----\n\n# Get list of ADSL vars required for derivations\nadsl_vars &lt;- exprs(TRTSDT, TRTSDTM, TRT01P, TRT01A)\n\npc_dates &lt;- pc %&gt;%\n  # Join ADSL with PC (need TRTSDT for ADY derivation)\n  derive_vars_merged(\n    dataset_add = adsl,\n    new_vars = adsl_vars,\n    by_vars = exprs(STUDYID, USUBJID)\n  ) %&gt;%\n  # Derive analysis date/time\n  # Impute missing time to 00:00:00\n  derive_vars_dtm(\n    new_vars_prefix = \"A\",\n    dtc = PCDTC,\n    time_imputation = \"00:00:00\"\n  ) %&gt;%\n  # Derive dates and times from date/times\n  derive_vars_dtm_to_dt(exprs(ADTM)) %&gt;%\n  derive_vars_dtm_to_tm(exprs(ADTM)) %&gt;%\n  derive_vars_dy(reference_date = TRTSDT ,\n                 source_vars = exprs(ADT)) %&gt;%\n  # Derive event ID and nominal relative time from first dose (NFRLT)\n  mutate(\n    EVID = 0,\n    DRUG = PCTEST,\n    NFRLT = if_else(PCTPTNUM &lt; 0, 0, PCTPTNUM), .after = USUBJID\n  )\n\n# ---- Get dosing information ----\n\nex_dates &lt;- ex %&gt;%\n  derive_vars_merged(\n    dataset_add = adsl,\n    new_vars = adsl_vars,\n    by_vars = exprs(STUDYID, USUBJID)\n  ) %&gt;%\n  # Keep records with nonzero dose\n  filter(EXDOSE &gt; 0) %&gt;%\n  # Add time and set missing end date to start date\n  # Impute missing time to 00:00:00\n  # Note all times are missing for dosing records in this example data\n  # Derive Analysis Start and End Dates\n  derive_vars_dtm(\n    new_vars_prefix = \"AST\",\n    dtc = EXSTDTC,\n    time_imputation = \"00:00:00\"\n  ) %&gt;%\n  derive_vars_dtm(\n    new_vars_prefix = \"AEN\",\n    dtc = EXENDTC,\n    time_imputation = \"00:00:00\"\n  ) %&gt;%\n  # Derive event ID and nominal relative time from first dose (NFRLT)\n  mutate(\n    EVID = 1,\n    NFRLT = 24 * (VISITDY - 1), .after = USUBJID\n  ) %&gt;%\n  # Set missing end dates to start date\n  mutate(AENDTM = case_when(\n    is.na(AENDTM) ~ ASTDTM,\n    TRUE ~ AENDTM\n  )) %&gt;%\n  # Derive dates from date/times\n  derive_vars_dtm_to_dt(exprs(ASTDTM,AENDTM))\n\n# ---- Expand dosing records between start and end dates ----\n# Updated function includes nominal_time parameter\n\nex_exp &lt;- ex_dates %&gt;%\n  create_single_dose_dataset(\n    dose_freq = EXDOSFRQ,\n    start_date = ASTDT,\n    start_datetime = ASTDTM,\n    end_date = AENDT,\n    end_datetime = AENDTM,\n    nominal_time = NFRLT,\n    lookup_table = dose_freq_lookup,\n    lookup_column = CDISC_VALUE,\n    keep_source_vars = exprs(\n      STUDYID, USUBJID, EVID, EXDOSFRQ, EXDOSFRM,\n      NFRLT, EXDOSE, EXDOSU, EXTRT, ASTDT, ASTDTM, AENDT, AENDTM,\n      VISIT, VISITNUM, VISITDY,\n      TRT01A, TRT01P, DOMAIN, EXSEQ, !!!adsl_vars\n    )\n  ) %&gt;%\n  # Derive AVISIT based on nominal relative time\n  # Derive AVISITN to nominal time in whole days using integer division\n  # Define AVISIT based on nominal day\n  mutate(\n    AVISITN = NFRLT %/% 24 + 1,\n    AVISIT = paste(\"Day\", AVISITN),\n    ADTM = ASTDTM,\n    DRUG = EXTRT\n  ) %&gt;%\n  # Derive dates and times from datetimes\n  derive_vars_dtm_to_dt(exprs(ADTM)) %&gt;%\n  derive_vars_dtm_to_tm(exprs(ADTM,ASTDTM,AENDTM)) %&gt;%\n  derive_vars_dy(reference_date = TRTSDT, source_vars = exprs(ADT))\n\n# ---- Find first dose per treatment per subject ----\n# ---- Join with ADPC data and keep only subjects with dosing ----\n\nadpc_first_dose &lt;- pc_dates %&gt;%\n  derive_vars_merged(\n    dataset_add = ex_exp,\n    filter_add = (EXDOSE &gt; 0 & !is.na(ADTM)),\n    new_vars = exprs(FANLDTM = ADTM),\n    order = exprs(ADTM, EXSEQ),\n    mode = \"first\",\n    by_vars = exprs(STUDYID, USUBJID, DRUG)\n  ) %&gt;%\n  filter(!is.na(FANLDTM)) %&gt;%\n  # Derive AVISIT based on nominal relative time\n  # Derive AVISITN to nominal time in whole days using integer division\n  # Define AVISIT based on nominal day\n  mutate(\n    AVISITN = NFRLT %/% 24 + 1,\n    AVISIT = paste(\"Day\", AVISITN),\n  )\n\n# ---- Find previous dose  ----\n\nadpc_prev &lt;- adpc_first_dose %&gt;%\n  derive_vars_joined(\n    dataset_add = ex_exp,\n    by_vars = exprs(USUBJID),\n    order = exprs(ADTM),\n    new_vars = exprs(\n      ADTM_prev = ADTM, \n      EXDOSE_prev = EXDOSE, \n      AVISIT_prev = AVISIT,\n      AENDTM_prev = AENDTM\n    ),\n    join_vars = exprs(ADTM),\n    filter_add = NULL,\n    filter_join = ADTM &gt; ADTM.join,\n    mode = \"last\",\n    check_type = \"none\"\n  )\n\n# ---- Find next dose  ----\n\nadpc_next &lt;- adpc_prev %&gt;%\n  derive_vars_joined(\n    dataset_add = ex_exp,\n    by_vars = exprs(USUBJID),\n    order = exprs(ADTM),\n    new_vars = exprs(\n      ADTM_next = ADTM, \n      EXDOSE_next = EXDOSE, \n      AVISIT_next = AVISIT,\n      AENDTM_next = AENDTM\n    ),\n    join_vars = exprs(ADTM),\n    filter_add = NULL,\n    filter_join = ADTM &lt;= ADTM.join,\n    mode = \"first\",\n    check_type = \"none\"\n  )\n\n# ---- Find previous nominal time ----\n\nadpc_nom_prev &lt;- adpc_next %&gt;%\n  derive_vars_joined(\n    dataset_add = ex_exp,\n    by_vars = exprs(USUBJID),\n    order = exprs(NFRLT),\n    new_vars = exprs(NFRLT_prev = NFRLT),\n    join_vars = exprs(NFRLT),\n    filter_add = NULL,\n    filter_join = NFRLT &gt; NFRLT.join,\n    mode = \"last\",\n    check_type = \"none\"\n  )\n\n# ---- Find next nominal time ----\n\nadpc_nom_next &lt;- adpc_nom_prev %&gt;%\n  derive_vars_joined(\n    dataset_add = ex_exp,\n    by_vars = exprs(USUBJID),\n    order = exprs(NFRLT),\n    new_vars = exprs(NFRLT_next = NFRLT),\n    join_vars = exprs(NFRLT),\n    filter_add = NULL,\n    filter_join = NFRLT &lt;= NFRLT.join,\n    mode = \"first\",\n    check_type = \"none\"\n  )\n\n# ---- Combine ADPC and EX data ----\n# Derive Relative Time Variables\n\nadpc_arrlt &lt;- bind_rows(adpc_nom_next, ex_exp) %&gt;%\n  group_by(USUBJID, DRUG) %&gt;%\n  mutate(\n    FANLDTM = min(FANLDTM, na.rm = TRUE),\n    min_NFRLT = min(NFRLT_prev, na.rm = TRUE),\n    maxdate = max(ADT[EVID == 0], na.rm = TRUE), .after = USUBJID\n  ) %&gt;%\n  arrange(USUBJID, ADTM) %&gt;%\n  ungroup() %&gt;%\n  filter(ADT &lt;= maxdate) %&gt;%\n  # Derive Actual Relative Time from First Dose (AFRLT)\n  derive_vars_duration(\n    new_var = AFRLT,\n    start_date = FANLDTM,\n    end_date = ADTM,\n    out_unit = \"hours\",\n    floor_in = FALSE,\n    add_one = FALSE\n  ) %&gt;%\n  # Derive Actual Relative Time from Reference Dose (ARRLT)\n  derive_vars_duration(\n    new_var = ARRLT,\n    start_date = ADTM_prev,\n    end_date = ADTM,\n    out_unit = \"hours\",\n    floor_in = FALSE,\n    add_one = FALSE\n  ) %&gt;%\n  # Derive Actual Relative Time from Next Dose (AXRLT not kept)\n  derive_vars_duration(\n    new_var = AXRLT,\n    start_date = ADTM_next,\n    end_date = ADTM,\n    out_unit = \"hours\",\n    floor_in = FALSE,\n    add_one = FALSE\n  ) %&gt;%\n  mutate(\n    ARRLT = case_when(\n      EVID == 1 ~ 0,\n      is.na(ARRLT) ~ AXRLT,\n      TRUE ~ ARRLT\n    ),\n    # Derive Reference Dose Date\n    PCRFTDTM = case_when(\n      EVID == 1 ~ ADTM,\n      is.na(ADTM_prev) ~ ADTM_next,\n      TRUE ~ ADTM_prev\n    )\n  ) %&gt;%\n  # Derive dates and times from datetimes\n  derive_vars_dtm_to_dt(exprs(FANLDTM,PCRFTDTM)) %&gt;%\n  derive_vars_dtm_to_tm(exprs(FANLDTM,PCRFTDTM))\n\n# Derive Nominal Relative Time from Reference Dose (NRRLT)\n\nadpc_nrrlt &lt;- adpc_arrlt %&gt;%\n  mutate(\n    NRRLT = case_when(\n      EVID == 1 ~ 0,\n      is.na(NFRLT_prev) ~ NFRLT - min_NFRLT,\n      TRUE ~ NFRLT - NFRLT_prev\n    ),\n    NXRLT = case_when(\n      EVID == 1 ~ 0,\n      TRUE ~ NFRLT - NFRLT_next\n    )\n  )\n\n# ---- Derive Analysis Variables ----\n# Derive ATPTN, ATPT, ATPTREF, ABLFL and BASETYPE\n# Derive planned dose DOSEP, actual dose DOSEA and units\n# Derive PARAMCD and relative time units\n# Derive AVAL, AVALU and AVALCAT1\n\nadpc_aval &lt;- adpc_nrrlt %&gt;%\n  mutate(\n    ATPTN = case_when(\n      EVID == 1 ~ 0,\n      TRUE ~ PCTPTNUM\n    ),\n    ATPT = case_when(\n      EVID == 1 ~ \"Dose\",\n      TRUE ~ PCTPT\n    ),\n    ATPTREF = case_when(\n      EVID == 1 ~ AVISIT,\n      is.na(AVISIT_prev) ~ AVISIT_next,\n      TRUE ~ AVISIT_prev\n    ),\n    # Derive baseline flag for pre-dose records\n    ABLFL = case_when(\n      ATPT == \"Pre-dose\" ~ \"Y\",\n      TRUE ~ NA_character_\n    ),\n    # Derive BASETYPE\n    BASETYPE = paste(ATPTREF, \"Baseline\"),\n\n    # Derive Actual Dose\n    DOSEA = case_when(\n      EVID == 1 ~ EXDOSE,\n      is.na(EXDOSE_prev) ~ EXDOSE_next,\n      TRUE ~ EXDOSE_prev\n    ),\n    # Derive Planned Dose\n    DOSEP = case_when(\n      TRT01P == \"Xanomeline High Dose\" ~ 81,\n      TRT01P == \"Xanomeline Low Dose\" ~ 54\n    ),\n    DOSEU = \"mg\",\n  ) %&gt;%\n  # Derive relative time units\n  mutate(\n    FRLTU = \"h\",\n    RRLTU = \"h\",\n    # Derive PARAMCD\n    PARAMCD = coalesce(PCTESTCD, \"DOSE\"),\n    ALLOQ = PCLLOQ,\n    # Derive AVAL\n    AVAL = case_when(\n      EVID == 1 ~ EXDOSE,\n      PCSTRESC == \"&lt;BLQ\" & NFRLT == 0 ~ 0,\n      PCSTRESC == \"&lt;BLQ\" & NFRLT &gt; 0 ~ 0.5 * ALLOQ,\n      TRUE ~ PCSTRESN\n    ),\n    AVALU = case_when(\n      EVID == 1 ~ EXDOSU,\n      TRUE ~ PCSTRESU\n    ),\n    AVALCAT1 = if_else(PCSTRESC == \"&lt;BLQ\" ,\n                       PCSTRESC ,\n                       prettyNum(signif(AVAL, digits = 3))),\n  ) %&gt;%\n  # Add SRCSEQ\n  mutate(\n    SRCDOM = DOMAIN,\n    SRCVAR = \"SEQ\",\n    SRCSEQ = coalesce(PCSEQ, EXSEQ)\n  )\n\n# ---- Create DTYPE copy records ----\n\ndtype &lt;- adpc_aval %&gt;%\n  filter(NFRLT &gt; 0 & NXRLT == 0 & EVID == 0 & !is.na(AVISIT_next)) %&gt;%\n  select(-PCRFTDT, -PCRFTTM) %&gt;%\n  # Re-derive variables in for DTYPE copy records\n  mutate(\n    ABLFL = NA_character_,\n    ATPTREF = AVISIT_next,\n    ARRLT = AXRLT,\n    NRRLT = NXRLT,\n    PCRFTDTM = ADTM_next,\n    DOSEA = EXDOSE_next,\n    BASETYPE = paste(AVISIT_next, \"Baseline\"),\n    ATPT = \"Pre-dose\",\n    ATPTN = NFRLT,\n    ABLFL = \"Y\",\n    DTYPE = \"COPY\"\n  ) %&gt;%\n  derive_vars_dtm_to_dt(exprs(PCRFTDTM)) %&gt;%\n  derive_vars_dtm_to_tm(exprs(PCRFTDTM))\n\n# ---- Combine original records and DTYPE copy records ----\n\nadpc_dtype &lt;- bind_rows(adpc_aval, dtype) %&gt;%\n  arrange(STUDYID, USUBJID, BASETYPE, ADTM, NFRLT) %&gt;%\n  mutate(\n    # Derive MRRLT, ANL01FL and ANL02FL\n    MRRLT = if_else(ARRLT &lt; 0, 0, ARRLT),\n    ANL01FL = \"Y\",\n    ANL02FL = if_else(is.na(DTYPE), \"Y\", NA_character_),\n  )\n\n# ---- Derive BASE and Calculate Change from Baseline ----\n\nadpc_base &lt;- adpc_dtype %&gt;%\n  derive_var_base(\n    by_vars = exprs(STUDYID, USUBJID, PARAMCD, BASETYPE),\n    source_var = AVAL,\n    new_var = BASE,\n    filter = ABLFL == \"Y\"\n  )\n\nadpc_chg &lt;- derive_var_chg(adpc_base)\n\n# ---- Add ASEQ ----\n\nadpc_aseq &lt;- adpc_chg %&gt;%\n  # Calculate ASEQ\n  derive_var_obs_number(\n    new_var = ASEQ,\n    by_vars = exprs(STUDYID, USUBJID),\n    order = exprs(ADTM, BASETYPE, EVID, AVISITN, ATPTN, DTYPE),\n    check_type = \"error\"\n  ) %&gt;%\n  # Derive PARAM and PARAMN using metatools\n  create_var_from_codelist(metacore, input_var = PARAMCD, out_var = PARAM) %&gt;%\n  create_var_from_codelist(metacore, input_var = PARAMCD, out_var = PARAMN)\n\n#---- Derive additional baselines from VS ----\n\nadpc_baselines &lt;- adpc_aseq %&gt;%\n  derive_vars_merged(\n    dataset_add = vs,\n    filter_add = VSTESTCD == \"HEIGHT\",\n    by_vars = exprs(STUDYID, USUBJID),\n    new_vars = exprs(HTBL = VSSTRESN, HTBLU = VSSTRESU)\n  ) %&gt;%\n  derive_vars_merged(\n    dataset_add = vs,\n    filter_add = VSTESTCD == \"WEIGHT\" & VSBLFL == \"Y\",\n    by_vars = exprs(STUDYID, USUBJID),\n    new_vars = exprs(WTBL = VSSTRESN, WTBLU = VSSTRESU)\n  ) %&gt;%\n  mutate(\n    BMIBL = compute_bmi(height = HTBL, weight = WTBL),\n    BMIBLU = \"kg/m^2\"\n  )\n\n# ---- Add all ADSL variables ----\n\n# Add all ADSL variables\nadpc_prefinal &lt;- adpc_baselines %&gt;%\n  derive_vars_merged(\n    dataset_add = select(adsl, !!!negate_vars(adsl_vars)),\n    by_vars = exprs(STUDYID, USUBJID)\n  )\n\n# Final Steps, Select final variables and Add labels\n# This process will be based on your metadata, no example given for this reason\n# ...\n\ndir &lt;- \"./output\"\n\n# Apply metadata and perform associated checks ----\n# uses {metatools}\nadpc &lt;- attrib_func(adpc_prefinal,metacore)\n\n# xpt export function\nexport_xpt(adpc,metacore,dir,dsname)\n  \n# ---- Save output ----\n\n# parquet format\nwrite_parquet(\n  adpc, paste(paste(dir,\"adpc\",sep=\"/\"),\"gz.parquet\",sep=\".\")\n              , compression = \"gzip\", compression_level = 5)\n\nexport(adsl, \"./output/adsl.xpt\")\n\nwrite_parquet(\n  adpc, paste(paste(dir,\"adsl\",sep=\"/\"),\"gz.parquet\",sep=\".\")\n              , compression = \"gzip\", compression_level = 5)"
  },
  {
    "objectID": "adnca_desc.html",
    "href": "adnca_desc.html",
    "title": "4  ADNCAの変数の説明",
    "section": "",
    "text": "絶賛更新中"
  },
  {
    "objectID": "output_desc.html",
    "href": "output_desc.html",
    "title": "8  TLG作成のパッケージの説明",
    "section": "",
    "text": "絶賛更新中"
  }
]